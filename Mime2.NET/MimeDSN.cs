using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;

namespace MIME
{
    /// <summary>
    /// Delivery status notification.
    /// http://www.ietf.org/rfc/rfc1894.txt
    /// MIME content-type for delivery status notifications (DSNs).  
    /// A DSN can be used to notify the sender of a message of any of several conditions:  
    /// failed delivery, delayed delivery, successful delivery, or the gatewaying of a 
    /// message into an environment that may not support DSNs.
    /// </summary>
    public class MimeDSN : MIME.MimeBody
    {
        public MimeDSN()
        {

        }

        /// <summary>
        /// The optional Original-Envelope-Id field contains an "envelope
        /// identifier" which uniquely identifies the transaction during which
        /// the message was submitted, and was either (a) specified by the sender
        /// and supplied to the sender's MTA, or (b) generated by the sender's
        /// MTA and made available to the sender when the message was submitted.
        /// Its purpose is to allow the sender (or her user agent) to associate
        /// the returned DSN with the specific transaction in which the message
        /// was sent.
        /// </summary>
        public string OriginalEnvelopeId
        {
            get
            {
                return GetFieldValue("Original-Envelope-Id");
            }
            set
            {
                SetFieldValue("Original-Envelope-Id", value);
            }
        }

        /// <summary>
        /// A DSN describes the results of attempts to deliver, relay, or gateway
        /// a message to one or more recipients.  In all cases, the Reporting-MTA
        /// is the MTA which attempted to perform the delivery, relay, or gateway
        /// operation described in the DSN.  This field is required.
        /// </summary>
        public string ReportingMTA
        {
            get
            {
                return GetFieldValue("Reporting-MTA");
            }
            set
            {
                SetFieldValue("Reporting-MTA", value);
            }
        }

        /// <summary>
        /// The DSN-Gateway field indicates the name of the gateway or MTA which
        /// translated a foreign (non-Internet) delivery status notification into
        /// this DSN.  This field MUST appear in any DSN which was translated by
        /// a gateway from a foreign system into DSN format, and MUST NOT appear
        /// otherwise.
        /// </summary>
        public string DSNGateway
        {
            get
            {
                return GetFieldValue("DSN-Gateway");
            }
            set
            {
                SetFieldValue("DSN-Gateway", value);
            }
        }

        /// <summary>
        /// The optional Received-From-MTA field indicates the name of the MTA
        /// from which the message was received.
        /// </summary>
        public string ReceivedFromMTA
        {
            get
            {
                return GetFieldValue("Received-From-MTA");
            }
            set
            {
                SetFieldValue("Received-From-MTA", value);
            }
        }

        /// <summary>
        /// The optional Arrival-Date field indicates the date and time at which
        /// the message arrived at the Reporting MTA.  If the Last-Attempt-Date
        /// field is also provided in a per-recipient field, this can be used to
        /// determine the interval between when the message arrived at the
        /// Reporting MTA and when the report was issued for that recipient.
        /// </summary>
        public string ArrivalDate
        {
            get
            {
                return GetFieldValue("Arrival-Date");
            }
            set
            {
                SetFieldValue("Arrival-Date", value);
            }
        }

        private List<MimeDSNRecipient> _recipients = null;

        public IList<MimeDSNRecipient> Recipients
        {
            get
            {
                return _recipients;
            }
        }

        /// TODO: write body
        public override void LoadBody(string strData)
        {
            base.LoadBody(strData);

            _recipients = new List<MimeDSNRecipient>();

            int current = strData.IndexOf("\r\n\r\n") + 4;
            int partend;
            do
            {
                partend = strData.IndexOf("\r\n\r\n", current);
                int len = (partend == -1) ? strData.Length - current : partend - current;
                if (len == 0) break;
                MimeDSNRecipient recipient = new MimeDSNRecipient();
                recipient.LoadHead(strData.Substring(current, len));
                _recipients.Add(recipient);
                current = partend + 4;
            } while (partend != -1);
        }
    }
}
