<?xml version="1.0" encoding="utf-8"?>
<!-- Generated by Atom.NET - http://atomnet.sourceforge.net -->
<feed version="0.3" xmlns="http://purl.org/atom/ns#">
<title>Miguel de Icaza</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<tagline>Miguel de Icaza's web log</tagline>
<id>http://primates.ximian.com/~miguel/activity-log.php</id>
<generator url="http://atomnet.sourceforge.net/" version="0.4"> Generated by Atom.NET - http://atomnet.sourceforge.net </generator>
<copyright>Copyright © 2003, 2004</copyright>
<modified>2004-06-23T01:19:21-04:00</modified>
<entry>
<title>23 Jun 2004: Google censors Persspectives</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f23%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-23T13:55:00-04:00</modified>
<issued>2004-06-23T13:55:00-04:00</issued>
<created>2004-06-23T13:55:00-04:00</created>
<summary>
	<p>My friend Jon Perr was running a political commentary site,
	called <a
	href="http://www.perrspectives.com/">Perrspectives</a> and
	using Google adwords to advertise it.

	<p>Here is the <a
	href="http://www.perrspectives.com/articles/art_gagorder01.htm">tale</a>
	of the adwords censoring his site.
</summary>
<content>
	<p>My friend Jon Perr was running a political commentary site,
	called <a
	href="http://www.perrspectives.com/">Perrspectives</a> and
	using Google adwords to advertise it.

	<p>Here is the <a
	href="http://www.perrspectives.com/articles/art_gagorder01.htm">tale</a>
	of the adwords censoring his site.
</content>
</entry>
<entry>
<title>21 Jun 2004: </title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f21%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-21T13:55:00-04:00</modified>
<issued>2004-06-21T13:55:00-04:00</issued>
<created>2004-06-21T13:55:00-04:00</created>
<summary>
	<p>One of the best Daily Shows today.  Jon Stewart was amazing.
	
<h3>Atom support in LameBlog</h3>

	<p>Lame Blog now supports Atom using <a
	href="http://atomnet.sourceforge.net/">Atom.NET</a>.  It
	supports Mono out of the box (yup, nice Makefile and all), and
	comes with awesome <a
	href="http://atomnet.sourceforge.net/doc/index.html">docs</a>
	for it.  Am still an Atom newbie, so I do not know if I got
	everything right, drop me a note if my Atom stinks.

	<p>It took 10 minutes, so do not expect Enterprise-enabled,
	transactional based atom feed just yet.
</summary>
<content>
	<p>One of the best Daily Shows today.  Jon Stewart was amazing.
	
<h3>Atom support in LameBlog</h3>

	<p>Lame Blog now supports Atom using <a
	href="http://atomnet.sourceforge.net/">Atom.NET</a>.  It
	supports Mono out of the box (yup, nice Makefile and all), and
	comes with awesome <a
	href="http://atomnet.sourceforge.net/doc/index.html">docs</a>
	for it.  Am still an Atom newbie, so I do not know if I got
	everything right, drop me a note if my Atom stinks.

	<p>It took 10 minutes, so do not expect Enterprise-enabled,
	transactional based atom feed just yet.
</content>
</entry>
<entry>
<title>19 Jun 2004: Cory Doctorow's talk on DRM</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f19%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-19T13:55:00-04:00</modified>
<issued>2004-06-19T13:55:00-04:00</issued>
<created>2004-06-19T13:55:00-04:00</created>
<summary>
	<p>Cory from the EFF went to Microsoft to talk about DRM, here
	is a <a href="http://craphound.com/msftdrm.txt">transcript</a>
	which should be mandatory reading.

	<p>Joel keeps pumping out the <a
	href="http://www.joelonsoftware.com/articles/APIWar.html">gems</a>.

	<p>Most importantly, he follows up with a <a
	href="http://www.joelonsoftware.com/items/2004/06/17.html">concrete
	list of features</a> that the web needs. Now is the time for
	all good hackers to join the <a
	href="http://www.mozilla.org">Mozilla</a> development.

	<p>A key to the proposal from Joel is that some high-level
	features must be incorporated into HTML in some form, and not
	be limited to server-side controls implemented with a
	particular technology (ASP.NET or Struts or PHP): it should be
	something that can be placed on a static HTML page.

	
</summary>
<content>
	<p>Cory from the EFF went to Microsoft to talk about DRM, here
	is a <a href="http://craphound.com/msftdrm.txt">transcript</a>
	which should be mandatory reading.

	<p>Joel keeps pumping out the <a
	href="http://www.joelonsoftware.com/articles/APIWar.html">gems</a>.

	<p>Most importantly, he follows up with a <a
	href="http://www.joelonsoftware.com/items/2004/06/17.html">concrete
	list of features</a> that the web needs. Now is the time for
	all good hackers to join the <a
	href="http://www.mozilla.org">Mozilla</a> development.

	<p>A key to the proposal from Joel is that some high-level
	features must be incorporated into HTML in some form, and not
	be limited to server-side controls implemented with a
	particular technology (ASP.NET or Struts or PHP): it should be
	something that can be placed on a static HTML page.

	
</content>
</entry>
<entry>
<title>18 Jun 2004: Usenix in Boston</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f18%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-18T13:55:00-04:00</modified>
<issued>2004-06-18T13:55:00-04:00</issued>
<created>2004-06-18T13:55:00-04:00</created>
<summary>
	<p>My <a
	href="http://www.usenix.org/events/usenix04/">favorite
	conference</a> is coming to town in a couple of weeks.  Hope
	to see a lot of folks

	<p>Martin has been doing quite a lot of work on the Mono
	Debugger, getting nicer every day.  And it has docs ;-) 

	
</summary>
<content>
	<p>My <a
	href="http://www.usenix.org/events/usenix04/">favorite
	conference</a> is coming to town in a couple of weeks.  Hope
	to see a lot of folks

	<p>Martin has been doing quite a lot of work on the Mono
	Debugger, getting nicer every day.  And it has docs ;-) 

	
</content>
</entry>
<entry>
<title>16 Jun 2004: More Microsoft Open Source</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f16%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-16T13:55:00-04:00</modified>
<issued>2004-06-16T13:55:00-04:00</issued>
<created>2004-06-16T13:55:00-04:00</created>
<summary>
	<p>A parser and scanner for VB.NET has been <a
	href="http://www.gotdotnet.com/Community/Workspaces/workspace.aspx?id=d8da92aa-354c-4bb0-8e9b-e4763b49a0e3">released</a>
	by Microsoft.  It is written in VB.
	
<h3>Manufacturing the Facts.</h3>

	<p><a
	href="http://www.aljazeera.com/cgi-bin/news_service/middle_east_full_story.asp?service_id=2230">Kuwait
	Times</a>: "U.S truck carrying radioactive material caught in
	Kuwait".

	<p><a
	href="http://www.tehrantimes.com/Description.asp?Da=6/15/2004&Cat=4&Num=020">Tehran
	Times:</a> "The MNA reported for the first time the coalition
	forces suspicious transfer of WMD parts from Kuwait to
	Southern Iraq by trucks."

	<p><b>Update</b>: Someone researched this in depth <a
	href="http://www.livejournal.com/users/amcmillan/67293.html">here</a>,
	and apparently the trucks were coming *out*, not in.
</summary>
<content>
	<p>A parser and scanner for VB.NET has been <a
	href="http://www.gotdotnet.com/Community/Workspaces/workspace.aspx?id=d8da92aa-354c-4bb0-8e9b-e4763b49a0e3">released</a>
	by Microsoft.  It is written in VB.
	
<h3>Manufacturing the Facts.</h3>

	<p><a
	href="http://www.aljazeera.com/cgi-bin/news_service/middle_east_full_story.asp?service_id=2230">Kuwait
	Times</a>: "U.S truck carrying radioactive material caught in
	Kuwait".

	<p><a
	href="http://www.tehrantimes.com/Description.asp?Da=6/15/2004&Cat=4&Num=020">Tehran
	Times:</a> "The MNA reported for the first time the coalition
	forces suspicious transfer of WMD parts from Kuwait to
	Southern Iraq by trucks."

	<p><b>Update</b>: Someone researched this in depth <a
	href="http://www.livejournal.com/users/amcmillan/67293.html">here</a>,
	and apparently the trucks were coming *out*, not in.
</content>
</entry>
<entry>
<title>15 Jun 2004: Cocoa Sharp</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f15%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-15T13:55:00-04:00</modified>
<issued>2004-06-15T13:55:00-04:00</issued>
<created>2004-06-15T13:55:00-04:00</created>
<summary>
	<p>The Cocoa# developers got their first window showing on the
	MacOS X, and they also got inheritance working.  This is a
	young binding, but here is a screenshot of what it looks like:

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=cocoa-sharp.png&caption=Cocoa# sample application."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-cocoa-sharp.png"></a><p>Cocoa# sample application.</center></p></summary>
<content>
	<p>The Cocoa# developers got their first window showing on the
	MacOS X, and they also got inheritance working.  This is a
	young binding, but here is a screenshot of what it looks like:

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=cocoa-sharp.png&caption=Cocoa# sample application."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-cocoa-sharp.png"></a><p>Cocoa# sample application.</center></p></content>
</entry>
<entry>
<title>14 Jun 2004: Web Page Thumbails Sharp!</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f14%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-14T13:55:00-04:00</modified>
<issued>2004-06-14T13:55:00-04:00</issued>
<created>2004-06-14T13:55:00-04:00</created>
<summary>
	<img src="http://primates.ximian.com/~miguel/images/shoot.png">

	<p>Ross <a
	href="http://www.burtonini.com/blog/computers/mozilla-thumbnail-20040614.xhtml">improved</a>
	on a script from <a
	href="http://www.hackdiary.com/archives/000055.html">Matt</a>
	to do web page thumbnails.

	<p>Here is the same written C#, Gtk# and Gecko#.

<pre class="code-csharp">
using System;
using Gtk;
using Gecko;

class X {
	static WebControl wc;
	static string output = "shot.png";
	static string url;
	static int width = -1;
	static int height = -1;
	
	static void Main (string [] args)
	{
		for (int i = 0; i < args.Length; i++){
			switch (args [i]){
			case "-width":
				try {
					i++;
					width = Int32.Parse (args [i]);
				} catch {
					Console.WriteLine ("-width requires an numeric argument");
				}
				break;
			case "-height":
				try {
					i++;
					height = Int32.Parse (args [i]);
				} catch {
					Console.WriteLine ("-height requires an numeric argument");
				}
				break;
			case "-help":
			case "-h":
				Help ();
				break;
				
			default:
				if (url == null)
					url = args [i];
				else if (output == null)
					output = args [i];
				else
					Help ();
				break;
			}
		}

		Application.Init();
		Window w = new Window ("test");
		wc = new WebControl ();
		wc.LoadUrl (args [0]);
		wc.NetStop += MakeShot;
		wc.Show ();
		wc.SetSizeRequest (1024, 768);
		w.Add (wc);
		w.ShowAll ();
		Application.Run();
	}

	static void Help ()
	{
		Console.WriteLine ("Usage is: shot [-width N] [-height N] url [shot]");
		Environment.Exit (0);
	}
	
	static void MakeShot (object sender, EventArgs a)
	{
		Gdk.Window win = wc.GdkWindow;
		int iwidth = wc.Allocation.Width;
		int iheight = wc.Allocation.Height;
		Gdk.Pixbuf p = new Gdk.Pixbuf (Gdk.Colorspace.Rgb, false, 8, iwidth, iheight);
		Gdk.Pixbuf scaled;
		
		p.GetFromDrawable (win, win.Colormap, 0, 0, 0, 0, iwidth, iheight);
		if (width == -1){
			if (height == -1)
				scaled = p;
			else
				scaled = p.ScaleSimple (height * iwidth / iheight, height, Gdk.InterpType.Hyper);
		} else {
			if (height == -1)
				scaled = p.ScaleSimple (width, width * iheight / iwidth, Gdk.InterpType.Hyper);
			else
				scaled = p.ScaleSimple (width, height, Gdk.InterpType.Hyper);
		}
		
		scaled.Savev (output, "png", null, null); 
		Application.Quit (); 
	}
}
</pre>

</summary>
<content>
	<img src="http://primates.ximian.com/~miguel/images/shoot.png">

	<p>Ross <a
	href="http://www.burtonini.com/blog/computers/mozilla-thumbnail-20040614.xhtml">improved</a>
	on a script from <a
	href="http://www.hackdiary.com/archives/000055.html">Matt</a>
	to do web page thumbnails.

	<p>Here is the same written C#, Gtk# and Gecko#.

<pre class="code-csharp">
using System;
using Gtk;
using Gecko;

class X {
	static WebControl wc;
	static string output = "shot.png";
	static string url;
	static int width = -1;
	static int height = -1;
	
	static void Main (string [] args)
	{
		for (int i = 0; i < args.Length; i++){
			switch (args [i]){
			case "-width":
				try {
					i++;
					width = Int32.Parse (args [i]);
				} catch {
					Console.WriteLine ("-width requires an numeric argument");
				}
				break;
			case "-height":
				try {
					i++;
					height = Int32.Parse (args [i]);
				} catch {
					Console.WriteLine ("-height requires an numeric argument");
				}
				break;
			case "-help":
			case "-h":
				Help ();
				break;
				
			default:
				if (url == null)
					url = args [i];
				else if (output == null)
					output = args [i];
				else
					Help ();
				break;
			}
		}

		Application.Init();
		Window w = new Window ("test");
		wc = new WebControl ();
		wc.LoadUrl (args [0]);
		wc.NetStop += MakeShot;
		wc.Show ();
		wc.SetSizeRequest (1024, 768);
		w.Add (wc);
		w.ShowAll ();
		Application.Run();
	}

	static void Help ()
	{
		Console.WriteLine ("Usage is: shot [-width N] [-height N] url [shot]");
		Environment.Exit (0);
	}
	
	static void MakeShot (object sender, EventArgs a)
	{
		Gdk.Window win = wc.GdkWindow;
		int iwidth = wc.Allocation.Width;
		int iheight = wc.Allocation.Height;
		Gdk.Pixbuf p = new Gdk.Pixbuf (Gdk.Colorspace.Rgb, false, 8, iwidth, iheight);
		Gdk.Pixbuf scaled;
		
		p.GetFromDrawable (win, win.Colormap, 0, 0, 0, 0, iwidth, iheight);
		if (width == -1){
			if (height == -1)
				scaled = p;
			else
				scaled = p.ScaleSimple (height * iwidth / iheight, height, Gdk.InterpType.Hyper);
		} else {
			if (height == -1)
				scaled = p.ScaleSimple (width, width * iheight / iwidth, Gdk.InterpType.Hyper);
			else
				scaled = p.ScaleSimple (width, height, Gdk.InterpType.Hyper);
		}
		
		scaled.Savev (output, "png", null, null); 
		Application.Quit (); 
	}
}
</pre>

</content>
</entry>
<entry>
<title>11 Jun 2004: On .NET and portability</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f11%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-11T13:55:00-04:00</modified>
<issued>2004-06-11T13:55:00-04:00</issued>
<created>2004-06-11T13:55:00-04:00</created>
<summary>
	<p>Jeff posted on portability of Java vs .NET code in <a
	href="http://blogs.sun.com/roller/page/jeffdillon/20040609">an
	article</a>.

	<p>First lets state the obvious: you can write portable code
	with C# and .NET (duh).  Our C# compiler uses plenty of .NET
	APIs and works just fine across Linux, Solaris, MacOS and
	Windows.  Scott also <a
	href="http://www.hanselman.com/blog/PermaLink.aspx?guid=f75f6f41-8408-4fa8-8fc3-13f5d95f540c">pointed</a>
	to  <a
	href="http://blogs.ngallery.org/jasona/archive/2004/04/27/200.aspx">nGallery
	1.6.1</a> Mono-compliance post which has some nice portability
	rules.

	<p>Porting an application from the real .NET to Mono is a
	relatively simple exercise in most cases (path separators and
	filename casing).  A situation that I would like to fix on
	upcoming versions of Mono to simplify the porting (with some
	kind of configuration flag).

	<p>It is also a matter of how much your application needs to
	integrate with the OS.  Some applications needs this
	functionality, and some others do not.  

	<p>If my choice is between a system that does not let me
	integrate with the OS easily or a system that does, I
	personally rather use the later and be responsible for any
	portability issues myself.

	<p>That being said, I personally love to write software that
	takes advantage of the native platform am on, specially on the
	desktop.  I want to take advantage of what my desktop has to
	offer: <a href="http://gtk-sharp.sf.net">Gtk#</a> (when using
	Linux), <a href="http://cairographics.org/">Cairo</a>, <a
	href="http://www.randyridge.com/Tao/Default.aspx">OpenGL</a>,
	<a href="http://developer.apple.com/cocoa/">Cocoa#</a> (when
	using the Mac), <a
	href="http://www.gnome.org/projects/gconf/">GConf</a>, <a
	href="http://ftp.gnome.org/pub/GNOME/sources/gnome-print/">Gnome
	Printing</a>, and access to Posix.

	<p>If my software uses all of the above libraries, will it be
	easily portable?  Most likely not.

	<p>Consider what the <a
	href="http://forge.novell.com/modules/xfmod/project/?ifolder">iFolder
	team</a> is doing: they are writing the core libraries as a
	cross platform reusable component.  This component is called
	"Simias" and provides the basic synchronization and
	replication services.  Simias works unchanged on Linux, MacOS,
	Windows and Solaris.  Like every other cross platform
	software, it must be tested on each platform, and bugs on each
	platform must be debugged.

	<p>This is not different than doing any other kind of cross
	platform development. 

	<p>Then they integrate with each operating system natively at
	the user interface level.  Windows.Forms and COM on Windows;
	Gtk# on Linux and in the future Cocoa# on the Mac.

	<p>Although Gtk# looks and feels like Windows.Forms on
	Windows, the problem that they were facing is that Gtk# was an
	extra download for people using iFolder, and they chose to
	keep things simple for the end user.

<h3>Mono as a new Wine?</h3>

	<p>Although Jeff's post is fairly naive and not that
	interesting I do have a problem with his <a
	href="http://blogs.sun.com/roller/page/jeffdillon/20040610">follow
	up</a>: Mono is not just a `Wine-like' technology to emulate
	an API.

	<p>Mono is a complete development stack, with a standard core
	from ECMA and ISO.  Jeff has obviously not written any code
	with Mono, or he would know that it is quite an enjoyable
	<i>standalone development platform</i> as oppposed to just a
	runtime.

	<p>Mono is also not limited to run the .NET code, thanks to <a
	href="http://www.ikvm.net">IKVM</a>: a Java VM written
	entirely in C# and .NET, we can run Java code just as well as
	.NET on the same virtual machine, and have them happily
	talking to each other. 
</summary>
<content>
	<p>Jeff posted on portability of Java vs .NET code in <a
	href="http://blogs.sun.com/roller/page/jeffdillon/20040609">an
	article</a>.

	<p>First lets state the obvious: you can write portable code
	with C# and .NET (duh).  Our C# compiler uses plenty of .NET
	APIs and works just fine across Linux, Solaris, MacOS and
	Windows.  Scott also <a
	href="http://www.hanselman.com/blog/PermaLink.aspx?guid=f75f6f41-8408-4fa8-8fc3-13f5d95f540c">pointed</a>
	to  <a
	href="http://blogs.ngallery.org/jasona/archive/2004/04/27/200.aspx">nGallery
	1.6.1</a> Mono-compliance post which has some nice portability
	rules.

	<p>Porting an application from the real .NET to Mono is a
	relatively simple exercise in most cases (path separators and
	filename casing).  A situation that I would like to fix on
	upcoming versions of Mono to simplify the porting (with some
	kind of configuration flag).

	<p>It is also a matter of how much your application needs to
	integrate with the OS.  Some applications needs this
	functionality, and some others do not.  

	<p>If my choice is between a system that does not let me
	integrate with the OS easily or a system that does, I
	personally rather use the later and be responsible for any
	portability issues myself.

	<p>That being said, I personally love to write software that
	takes advantage of the native platform am on, specially on the
	desktop.  I want to take advantage of what my desktop has to
	offer: <a href="http://gtk-sharp.sf.net">Gtk#</a> (when using
	Linux), <a href="http://cairographics.org/">Cairo</a>, <a
	href="http://www.randyridge.com/Tao/Default.aspx">OpenGL</a>,
	<a href="http://developer.apple.com/cocoa/">Cocoa#</a> (when
	using the Mac), <a
	href="http://www.gnome.org/projects/gconf/">GConf</a>, <a
	href="http://ftp.gnome.org/pub/GNOME/sources/gnome-print/">Gnome
	Printing</a>, and access to Posix.

	<p>If my software uses all of the above libraries, will it be
	easily portable?  Most likely not.

	<p>Consider what the <a
	href="http://forge.novell.com/modules/xfmod/project/?ifolder">iFolder
	team</a> is doing: they are writing the core libraries as a
	cross platform reusable component.  This component is called
	"Simias" and provides the basic synchronization and
	replication services.  Simias works unchanged on Linux, MacOS,
	Windows and Solaris.  Like every other cross platform
	software, it must be tested on each platform, and bugs on each
	platform must be debugged.

	<p>This is not different than doing any other kind of cross
	platform development. 

	<p>Then they integrate with each operating system natively at
	the user interface level.  Windows.Forms and COM on Windows;
	Gtk# on Linux and in the future Cocoa# on the Mac.

	<p>Although Gtk# looks and feels like Windows.Forms on
	Windows, the problem that they were facing is that Gtk# was an
	extra download for people using iFolder, and they chose to
	keep things simple for the end user.

<h3>Mono as a new Wine?</h3>

	<p>Although Jeff's post is fairly naive and not that
	interesting I do have a problem with his <a
	href="http://blogs.sun.com/roller/page/jeffdillon/20040610">follow
	up</a>: Mono is not just a `Wine-like' technology to emulate
	an API.

	<p>Mono is a complete development stack, with a standard core
	from ECMA and ISO.  Jeff has obviously not written any code
	with Mono, or he would know that it is quite an enjoyable
	<i>standalone development platform</i> as oppposed to just a
	runtime.

	<p>Mono is also not limited to run the .NET code, thanks to <a
	href="http://www.ikvm.net">IKVM</a>: a Java VM written
	entirely in C# and .NET, we can run Java code just as well as
	.NET on the same virtual machine, and have them happily
	talking to each other. 
</content>
</entry>
<entry>
<title>08 Jun 2004: Jeffrey in Boston</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f8%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-08T13:55:00-04:00</modified>
<issued>2004-06-08T13:55:00-04:00</issued>
<created>2004-06-08T13:55:00-04:00</created>
<summary>
	Jeffrey McManus is in <a
	href="http://mcmanus.typepad.com/grind/2004/06/speaking_in_bos.html">Boston</a>
	this week.
	
<h3>Nat Interview</h3>

	<p>Another interview with <a
	href="http://www.ofb.biz/modules.php?name=News&file=article&sid=307&mode=&order=0&thold=0">Nat</a>
	on the Novell Linux Strategy.

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=vp.jpg&caption=Nat and Dan in Bangalore."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-vp.jpg"></a><p>Nat and Dan in Bangalore.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=lalaha.jpg&caption=Laura in Kona"><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-lalaha.jpg"></a><p>Laura in Kona</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=bang.jpg&caption=Bangalore."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-bang.jpg"></a><p>Bangalore.</center></p>
<h3>Arturo's Laptop</h3>

	<p>Arturo is a modern day Indiana Jones, a resourceful
	humanist.  On this picture with his laptop and portable 17"
	monitor, making up for a hard learned lesson: do not fight
	gravity with your notebook LCD screen.   

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=gulev.jpg&caption=Arturo and his C64-like TiBook."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-gulev.jpg"></a><p>Arturo and his C64-like TiBook.</center></p>

	
</summary>
<content>
	Jeffrey McManus is in <a
	href="http://mcmanus.typepad.com/grind/2004/06/speaking_in_bos.html">Boston</a>
	this week.
	
<h3>Nat Interview</h3>

	<p>Another interview with <a
	href="http://www.ofb.biz/modules.php?name=News&file=article&sid=307&mode=&order=0&thold=0">Nat</a>
	on the Novell Linux Strategy.

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=vp.jpg&caption=Nat and Dan in Bangalore."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-vp.jpg"></a><p>Nat and Dan in Bangalore.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=lalaha.jpg&caption=Laura in Kona"><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-lalaha.jpg"></a><p>Laura in Kona</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=bang.jpg&caption=Bangalore."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-bang.jpg"></a><p>Bangalore.</center></p>
<h3>Arturo's Laptop</h3>

	<p>Arturo is a modern day Indiana Jones, a resourceful
	humanist.  On this picture with his laptop and portable 17"
	monitor, making up for a hard learned lesson: do not fight
	gravity with your notebook LCD screen.   

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=gulev.jpg&caption=Arturo and his C64-like TiBook."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-gulev.jpg"></a><p>Arturo and his C64-like TiBook.</center></p>

	
</content>
</entry>
<entry>
<title>05 Jun 2004: On the Google IPO</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#6%2f5%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-06-05T13:55:00-04:00</modified>
<issued>2004-06-05T13:55:00-04:00</issued>
<created>2004-06-05T13:55:00-04:00</created>
<summary>
	<a
	href="http://blogs.osafoundation.org/mitch/000593.html#000593">Mitch
	Kapor</a>: "<i>In a better world, would all public corporations
	be more accountable to their shareholders? Hell, yes. But
	today's shareholders are, in the main, no better than the vast
	majority of companies they invest in. They only really care
	about their financial upside, not the means by which it is
	achieved. Exploitation of labor here and abroad a la Wal-mart,
	environmental degradation, and massive corporate welfare
	through government subsidies and sweetheart deals a la
	Halliburton are perfectly acceptable sources of profit and
	make for perfectly good investments most say."</i>

<h3>Summer movies: The Corporation and Farenheit 9/11</h3>

	<p>Trailers are now available on <a
	href="http://www.rottentomatoes.com/m/TheCorporation-10003604/trailers.php">Rotten
	Tomatoes</a>, and a list of dates in the <a
	href="http://www.thecorporation.tv/usa/">US</a>

	<p>Can not wait to see Michael Moore's new movie, opens on
	June 25th!

<h3>Venus Transit</h3>

	<p><a
	href="http://sunearth.gsfc.nasa.gov/sunearthday/2004/index_vthome.htm">Venus
	Transit</a> on Tuesday.
</summary>
<content>
	<a
	href="http://blogs.osafoundation.org/mitch/000593.html#000593">Mitch
	Kapor</a>: "<i>In a better world, would all public corporations
	be more accountable to their shareholders? Hell, yes. But
	today's shareholders are, in the main, no better than the vast
	majority of companies they invest in. They only really care
	about their financial upside, not the means by which it is
	achieved. Exploitation of labor here and abroad a la Wal-mart,
	environmental degradation, and massive corporate welfare
	through government subsidies and sweetheart deals a la
	Halliburton are perfectly acceptable sources of profit and
	make for perfectly good investments most say."</i>

<h3>Summer movies: The Corporation and Farenheit 9/11</h3>

	<p>Trailers are now available on <a
	href="http://www.rottentomatoes.com/m/TheCorporation-10003604/trailers.php">Rotten
	Tomatoes</a>, and a list of dates in the <a
	href="http://www.thecorporation.tv/usa/">US</a>

	<p>Can not wait to see Michael Moore's new movie, opens on
	June 25th!

<h3>Venus Transit</h3>

	<p><a
	href="http://sunearth.gsfc.nasa.gov/sunearthday/2004/index_vthome.htm">Venus
	Transit</a> on Tuesday.
</content>
</entry>
<entry>
<title>31 May 2004: MonoDevelop on MacOS</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f31%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-31T13:55:00-04:00</modified>
<issued>2004-05-31T13:55:00-04:00</issued>
<created>2004-05-31T13:55:00-04:00</created>
<summary>
	<p>With Mono Beta2 I was able to get <a
	href="http://www.monodevelop.org">MonoDevelop</a> to work on
	my Mac.  

	<p>You must get Mono Beta 2 (0.95), gtksourceview (0.7 Fink),
	Mozilla (Fink), GtkSourceView# (0.3), Gecko# 0.4 and
	MonoDevelop 0.4.

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=monodevelop-macos.png&caption=MonoDevelop on MacOS X"><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-monodevelop-macos.png"></a><p>MonoDevelop on MacOS X</center></p>
	<p>There are a few Linux-isms in there that you must fix, a
	quick workaround is to add the following to your
	$prefix/etc/mono/config file:

<xmp class="shell">
	<dllmap dll="libgtk-win32-2.0-0.dll" target="libgtk-x11-2.0.0.dylib"/>
	<dllmap dll="gnomevfs-2" target="libgnomevfs-2.dylib"/>
	<dllmap dll="gdldock" target="libgdldock.dylib"/>
	<dllmap dll="libMonoPosixHelper" target="libMonoPosixHelper.dylib"/>
	<dllmap dll="libgtk-x11-2.0.so.0" target="libgtk-x11-2.0.0.dylib"/>
	<dllmap dll="libglib-2.0-0.dll" target="libglib-2.0.0.dylib"/>

</xmp>

	<p>Then you must edit
	$prefix/lib/monodevelop/bin/gdl-sharp.config, this is what I
	have:

<xmp class="shell">
	<configuration>
	  <dllmap dll="libglib-2.0-0.dll" target="libglib-2.0.0.dylib"/>
	  <dllmap dll="libgobject-2.0-0.dll" target="libgobject-2.0.so.0"/>
	  <dllmap dll="libatk-1.0-0.dll" target="libatk-1.0.so.0"/>
	  <dllmap dll="libgtk-win32-2.0-0.dll" target="libgtk-x11-2.0.so.0"/>
	</configuration>

</xmp>

	<p>You still need to use GDK_USE_XFT=0 from the command line.

	<p>Of course, the real fix is to get MonoDevelop to generate
	those files (and fix the few incorrect hardcoded references to
	x11), but I will let Todd do that.

<h3>InfoWorld Innovators!</h3>

	<p>I was named one of InfoWorld's 2004 innovators: <a
	href="http://www.infoworld.com/article/04/05/21/21FEinnov4_1.html">here.</a>

<h3>Rio</h3>

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=maria.jpg&caption=Maria in Rio."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-maria.jpg"></a><p>Maria in Rio.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=rio.jpg&caption=Rio."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-rio.jpg"></a><p>Rio.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=metropolitan.jpg&caption=Mauricio and Laura at the Metropolitan."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-metropolitan.jpg"></a><p>Mauricio and Laura at the Metropolitan.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=ecma.jpg&caption=At the first day of the ECMA meeting in Hawaii."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-ecma.jpg"></a><p>At the first day of the ECMA meeting in Hawaii.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=lato.jpg&caption=Laura and Marcelo in March."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-lato.jpg"></a><p>Laura and Marcelo in March.</center></p></summary>
<content>
	<p>With Mono Beta2 I was able to get <a
	href="http://www.monodevelop.org">MonoDevelop</a> to work on
	my Mac.  

	<p>You must get Mono Beta 2 (0.95), gtksourceview (0.7 Fink),
	Mozilla (Fink), GtkSourceView# (0.3), Gecko# 0.4 and
	MonoDevelop 0.4.

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=monodevelop-macos.png&caption=MonoDevelop on MacOS X"><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-monodevelop-macos.png"></a><p>MonoDevelop on MacOS X</center></p>
	<p>There are a few Linux-isms in there that you must fix, a
	quick workaround is to add the following to your
	$prefix/etc/mono/config file:

<xmp class="shell">
	<dllmap dll="libgtk-win32-2.0-0.dll" target="libgtk-x11-2.0.0.dylib"/>
	<dllmap dll="gnomevfs-2" target="libgnomevfs-2.dylib"/>
	<dllmap dll="gdldock" target="libgdldock.dylib"/>
	<dllmap dll="libMonoPosixHelper" target="libMonoPosixHelper.dylib"/>
	<dllmap dll="libgtk-x11-2.0.so.0" target="libgtk-x11-2.0.0.dylib"/>
	<dllmap dll="libglib-2.0-0.dll" target="libglib-2.0.0.dylib"/>

</xmp>

	<p>Then you must edit
	$prefix/lib/monodevelop/bin/gdl-sharp.config, this is what I
	have:

<xmp class="shell">
	<configuration>
	  <dllmap dll="libglib-2.0-0.dll" target="libglib-2.0.0.dylib"/>
	  <dllmap dll="libgobject-2.0-0.dll" target="libgobject-2.0.so.0"/>
	  <dllmap dll="libatk-1.0-0.dll" target="libatk-1.0.so.0"/>
	  <dllmap dll="libgtk-win32-2.0-0.dll" target="libgtk-x11-2.0.so.0"/>
	</configuration>

</xmp>

	<p>You still need to use GDK_USE_XFT=0 from the command line.

	<p>Of course, the real fix is to get MonoDevelop to generate
	those files (and fix the few incorrect hardcoded references to
	x11), but I will let Todd do that.

<h3>InfoWorld Innovators!</h3>

	<p>I was named one of InfoWorld's 2004 innovators: <a
	href="http://www.infoworld.com/article/04/05/21/21FEinnov4_1.html">here.</a>

<h3>Rio</h3>

<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=maria.jpg&caption=Maria in Rio."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-maria.jpg"></a><p>Maria in Rio.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=rio.jpg&caption=Rio."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-rio.jpg"></a><p>Rio.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=metropolitan.jpg&caption=Mauricio and Laura at the Metropolitan."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-metropolitan.jpg"></a><p>Mauricio and Laura at the Metropolitan.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=ecma.jpg&caption=At the first day of the ECMA meeting in Hawaii."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-ecma.jpg"></a><p>At the first day of the ECMA meeting in Hawaii.</center></p>
<p><center><a href="http://primates.ximian.com/~miguel/pic.php?name=lato.jpg&caption=Laura and Marcelo in March."><img border=0 src="http://primates.ximian.com/~miguel//pictures/small-lato.jpg"></a><p>Laura and Marcelo in March.</center></p></content>
</entry>
<entry>
<title>28 May 2004: Al Gore remarks at NYU</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f28%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-28T13:55:00-04:00</modified>
<issued>2004-05-28T13:55:00-04:00</issued>
<created>2004-05-28T13:55:00-04:00</created>
<summary>
	Al Gore's <a
	href="http://www.commondreams.org/views04/0527-01.htm">remarks
	at NYU.</a>.

<h3>Finkelstein in Toronto</h3>

	<a href="http://www.workingtv.com/finkelstein.html">video and
	audio</a>.  
</summary>
<content>
	Al Gore's <a
	href="http://www.commondreams.org/views04/0527-01.htm">remarks
	at NYU.</a>.

<h3>Finkelstein in Toronto</h3>

	<a href="http://www.workingtv.com/finkelstein.html">video and
	audio</a>.  
</content>
</entry>
<entry>
<title>22 May 2004: Follow up</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f22%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-22T13:55:00-04:00</modified>
<issued>2004-05-22T13:55:00-04:00</issued>
<created>2004-05-22T13:55:00-04:00</created>
<summary>
	<p>Mark Pilgrim has a great <a
	href="http://diveintomark.org/archives/2004/05/21/aftermath">follow
	up</a> to his freedom-0 article.  

<h3>Nemerle, C# and Anonymous Methods.</h3>

	<p>Spent some time this afternoon playing with <a
	href="http://www.nemerle.org">Nemerle</a> and their latest <a
	href="http://nemerle.org/mailman/pipermail/devel-en/2004-April/000033.html">release</a>.

	<p>Specially nice since now MonoDevelop supports Nemerle in
	the built-in editor.

	<p>My main problem is that I find it hard to think in any
	other way which is not the standard programming that I have
	grown up to do, maybe I need a hobby programming task to do.
	It will have to wait until we release Mono 1.0, right now
	things are busy.   

	<p>My personal wish: I would like a C#-like scripting language
	myself.  Sprinkle a few perlisms, rubyisms and pythonisms in
	there.  Drop the class carcass.

	<p>A small patch I have been playing with in my copious spare
	time is one to turn all unresolved method calls in C# to a
	dynamic code translation.  So basically:

<pre class="code-csharp">

  object a = new XmlDocument ();
  a.Load ("/tmp/a.xml");
</pre>

	<p>ie, notice that the type of the variable is `o'.  The
	downside: the runtime has to transform the incoming parameters
	to something that matches the call, you loose the compiler
	safety net, and its slower.  But at least you can prototype
	quickly ;-)

	<p>I do not like the current implementation of anonymous
	methods, it really does not work in the presence of nested
	anonymous methods, so I have gone back to the drawing board
	and have now a new design for this internal chunk of the
	compiler that am a lot happier with.  As soon as the beast
	compiles, I will upload a new patch.

	<p>The C# compiler also gained recently a new flag: -pkg:NAME
	which integrates pkg-config directly into the compiler.  We
	are making the world a better place, one command line option a
	day.

<h3>Managed code is fast</h3>

	<p>Andreas, Ben and Paolo <a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005843.html">
	have</a> <a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005844.html">been</a>
	<a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005858.html">discussing</a>
	moving existing code that we implement in C to the managed
	world, as our JIT is in some cases as good as the C compiler
	and the transition from managed to unmanaged is too costly: we
	can now move more code into the managed world.

	<p>The old gcc exceptions mechanism that the Mono JIT used for
	a long time to speedup calls into the unmanaged world is gone.
	It was too much of a support nightmare (gcc and libc would
	often be out of sync, rendering the optimization useless), and
	instead Zoltan has cooked up some ways to improve the
	transition cost on x86 and SPARC.

<h3>Ports</h3>

	<p>The PowerPC port got a big boost today with various fixes
	checked in from Paolo; Neale continues to update the S390 port
	and Zoltan has checked in some fixes to support Linux on the
	SPARC (in addition to Solaris).

	<p>We still need to support the Itanium and the x86-64 CPUs
	(if you have a good recommendation about a book on these
	platform, please mail me) as they are important platforms for
	SUSE.

<h3>Thread.Abort and File locking</h3>

	<p><a href="http://primates.ximian.com/~lluis/blog/">Lluis</a>
	completed this week the Thread.Abort implementation for Mono.
	Our old implementation had various issues if we aborted thread
	while we were in unmanaged code (since there was no way to
	clean things up).  Lluis' new implementation now shuts down
	things properly.

	<p>Now this might seem like a problem that few people would
	run into, but the reality is that it happened a lot with
	people using ThreadPools, ASP.NET or WebRequests since all of
	them triggered a call to Thread.Abort, and the side effects
	were ugly: from assertions in the runtime, to hangs at program exit.

	<p>This fixes the last major reliability blocker problem we
	had for Mono 1.0.

	<p>Dick in the meantime implemented the locking functionality
	for Files, a feature that some people needed and that was not
	really there before.

<h3>Xslt Joshua and documentation</h3>

	<p>Joshua has checked in the tools to produce HTML out of
	Monodoc.  Real men use Monodoc, but if you feel like giving up
	on your manhood, now you can browse uncompressed,
	not-as-beautiful, not-indexed classes ;-)

<h3>Marek. Martin.  Raja</h3>

	<p>They are rapidly closing the last pending bugs in the MCS
	compiler, none of them are crucial, but we want to ship with
	as few bugs as possible in the compiler.  At this point, we
	are no longer accepting large changes to the compiler (which
	also means that Anonymous Methods will just not make it into
	the 1.0 release, too bad, they were too cute).
</summary>
<content>
	<p>Mark Pilgrim has a great <a
	href="http://diveintomark.org/archives/2004/05/21/aftermath">follow
	up</a> to his freedom-0 article.  

<h3>Nemerle, C# and Anonymous Methods.</h3>

	<p>Spent some time this afternoon playing with <a
	href="http://www.nemerle.org">Nemerle</a> and their latest <a
	href="http://nemerle.org/mailman/pipermail/devel-en/2004-April/000033.html">release</a>.

	<p>Specially nice since now MonoDevelop supports Nemerle in
	the built-in editor.

	<p>My main problem is that I find it hard to think in any
	other way which is not the standard programming that I have
	grown up to do, maybe I need a hobby programming task to do.
	It will have to wait until we release Mono 1.0, right now
	things are busy.   

	<p>My personal wish: I would like a C#-like scripting language
	myself.  Sprinkle a few perlisms, rubyisms and pythonisms in
	there.  Drop the class carcass.

	<p>A small patch I have been playing with in my copious spare
	time is one to turn all unresolved method calls in C# to a
	dynamic code translation.  So basically:

<pre class="code-csharp">

  object a = new XmlDocument ();
  a.Load ("/tmp/a.xml");
</pre>

	<p>ie, notice that the type of the variable is `o'.  The
	downside: the runtime has to transform the incoming parameters
	to something that matches the call, you loose the compiler
	safety net, and its slower.  But at least you can prototype
	quickly ;-)

	<p>I do not like the current implementation of anonymous
	methods, it really does not work in the presence of nested
	anonymous methods, so I have gone back to the drawing board
	and have now a new design for this internal chunk of the
	compiler that am a lot happier with.  As soon as the beast
	compiles, I will upload a new patch.

	<p>The C# compiler also gained recently a new flag: -pkg:NAME
	which integrates pkg-config directly into the compiler.  We
	are making the world a better place, one command line option a
	day.

<h3>Managed code is fast</h3>

	<p>Andreas, Ben and Paolo <a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005843.html">
	have</a> <a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005844.html">been</a>
	<a
	href="http://lists.ximian.com/archives/public/mono-devel-list/2004-May/005858.html">discussing</a>
	moving existing code that we implement in C to the managed
	world, as our JIT is in some cases as good as the C compiler
	and the transition from managed to unmanaged is too costly: we
	can now move more code into the managed world.

	<p>The old gcc exceptions mechanism that the Mono JIT used for
	a long time to speedup calls into the unmanaged world is gone.
	It was too much of a support nightmare (gcc and libc would
	often be out of sync, rendering the optimization useless), and
	instead Zoltan has cooked up some ways to improve the
	transition cost on x86 and SPARC.

<h3>Ports</h3>

	<p>The PowerPC port got a big boost today with various fixes
	checked in from Paolo; Neale continues to update the S390 port
	and Zoltan has checked in some fixes to support Linux on the
	SPARC (in addition to Solaris).

	<p>We still need to support the Itanium and the x86-64 CPUs
	(if you have a good recommendation about a book on these
	platform, please mail me) as they are important platforms for
	SUSE.

<h3>Thread.Abort and File locking</h3>

	<p><a href="http://primates.ximian.com/~lluis/blog/">Lluis</a>
	completed this week the Thread.Abort implementation for Mono.
	Our old implementation had various issues if we aborted thread
	while we were in unmanaged code (since there was no way to
	clean things up).  Lluis' new implementation now shuts down
	things properly.

	<p>Now this might seem like a problem that few people would
	run into, but the reality is that it happened a lot with
	people using ThreadPools, ASP.NET or WebRequests since all of
	them triggered a call to Thread.Abort, and the side effects
	were ugly: from assertions in the runtime, to hangs at program exit.

	<p>This fixes the last major reliability blocker problem we
	had for Mono 1.0.

	<p>Dick in the meantime implemented the locking functionality
	for Files, a feature that some people needed and that was not
	really there before.

<h3>Xslt Joshua and documentation</h3>

	<p>Joshua has checked in the tools to produce HTML out of
	Monodoc.  Real men use Monodoc, but if you feel like giving up
	on your manhood, now you can browse uncompressed,
	not-as-beautiful, not-indexed classes ;-)

<h3>Marek. Martin.  Raja</h3>

	<p>They are rapidly closing the last pending bugs in the MCS
	compiler, none of them are crucial, but we want to ship with
	as few bugs as possible in the compiler.  At this point, we
	are no longer accepting large changes to the compiler (which
	also means that Anonymous Methods will just not make it into
	the 1.0 release, too bad, they were too cute).
</content>
</entry>
<entry>
<title>20 May 2004: More patents</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f20%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-20T13:55:00-04:00</modified>
<issued>2004-05-20T13:55:00-04:00</issued>
<created>2004-05-20T13:55:00-04:00</created>
<summary>
	<p>Seth has raised some <a
	href="http://www.gnome.org/~seth/blog//mono">valid points</a>
	on the patent problem, as it related to Mono.

	<p>A big problem with everyone raising potential patent
	problems with Mono is not that they are wrong in any way, but
	there are a few problems with it:

	<ul>
	
	  <li>Not using Mono in any shape or form <b>is not a blank
	  waiver against patents</b>.  That means that even if you
	  choose to stick to your beloved C, Python, C++ or anything
	  else, for any new software you write, you are likely to
	  infringe on someone else's patents (or even the same ones
	  that Mono could potentially infringe).

	  <li>Patents can be: <b>declared void</b> with <b>prior
	  art</b> showing that such invention did exist in the past.
	  Alternatively, you can <b>route</b> around it by using a
	  different technique than the one described in the patent to
	  provide the same feature (or something close) to avoid
	  infringing on a patent.

	  <li>Most people have no idea of what a patent is, or how it
	  works.  The actual invention is the claims bit.  Not the
	  introduction, not the summary, not the background, not the
	  references and not the drawings.  They help in making the
	  claims, but they are not the patent itself.  If you want to
	  play patent-lawyer on Internet, you should at least
	  familiarize yourself with the process.

	</ul>

	<p>Now, it is hard to argue with the nay-sayers about
	<b>routing</b> around the patent for two reasons: we do not
	know what might be patented <b>and</b> valid (ie, no prior art
	can be found or properly articulated) and most importantly for
	any given topic we can engage in weeks of discussion on what-if
	scenarios.

	<p>We do not plan on infringing patents, and if were to
	infringe on patent, we will either find prior art that renders
	that particular claim invalid, or rewrite the code to work in
	a different form.  We do not like software patents, but we
	will abide by the legal rules.

	<p>If you can not think of a different way of running a C#
	program than the one that exists today, you are not a very
	imaginative/innovative programmer.  The worst possible
	scenario is not `They will stop distribution forever'.  The
	worst possible scenario is `They can stop distribution until
	we find a workaround'.

	<p>And again, remember, the software patents problem is not
	limited to the specific instance of Mono.  Everything Seth
	said applies equally well to every bit of our open source
	stack today: do we infringe on a Microsoft patent?  Do *you*
	know for sure you do not?  Have you performed a patent search?
	On every possible bit?

	<p>Red Hat has chosen to adopt Java (despite the same
	potential problems with patents) and has decided that it is in
	their interest not to use C#/Mono.  Like Red Hat's Seth
	states: this is self inflicted damage on their part, and they
	will not be able to ship any of our leading edge GPL code
	(Simias, iFolder, F-Spot or any of our future development
	tools).   

	<p>Red Hat could either stop whining, and have their
	developers work in Mono and use Mono, and help us fight bogus
	patents or route around them, or they can keep posting to
	their blogs more fear-mongering.

	<p>Andy Satori has posted his insight <a
	href="http://lists.ximian.com/archives/public/mono-list/2004-May/020454.html">here</a>.

	<p>If you are going to reply, I just ask you that you take a
	step back, and for every instance of the word `Mono' replace
	it with every major open source project today `gnu libc',
	`linux kernel', `Open Office', `samba', `x11', `cairo',
	`gtk+', `qt', `binutils', `gcc', gnome', `qt', `mozilla', `my
	favorite file system', use your imagination.  

	<p>Does your foe have a patent to it?  Or someone that can be
	acquired by your foe?

<h3>On Stop Energy: my policy</h3>

	<p>Most people operate in <a
	href="http://www.userland.com/whatIsStopEnergy">Stop
	Energy</a> mode, so I typically ignore them, and keep moving.

	<p>A small story I like to tell people: when I started writing
	Gnumeric, I was very afraid of one thing: the computational
	engine.  How do we recalculate the value of cells when a
	change happens?  How do we make this perform well?  How do we
	do iterative computations?  How do you resolve recursive
	references?

	<p>All of those problems were fairly scary, and I did not have
	an answer to them.  I looked at all the source code I could
	find for spreadsheets around that time, and none of it did
	even a remotely good job: it was all pretty amateur, and none
	of it really did anything remotely close to what commercial
	software did.

	<p>I started work on Gnumeric nonetheless, figuring `When the
	time comes, I will face that problem', and spent the next
	three months making sure that Gnumeric was visually pleasant,
	that it looked like Excel, and that the "feel" was right.  I
	tried to implement computations trivially during that time in
	a couple hour hack and that failed miserably.

	<p>By the third month, I decided I would not touch a computer
	until I figured out an algorithm for doing these computations,
	I took a pencil and a notebook and went to write down the
	steps.  Surprisingly after a few hours of work I had something
	that looked correct.  

	<p>That same day I implemented the computational engine with
	the features I wanted and it just worked!  

	<p>What I like about this story, is that I could have given up
	at any point since there was a large problem ahead of me: a
	problem I had no answers to.  And I see this with many free
	software developers, students and even in normal social
	situations: people stop doing things because they see a big
	problem ahead of them that they can not possibly conceive
	working around.  My advise to every young programmer is to
	start writing code and delay addressing imaginary problems
	until they become real.

	<p>I like people who find and propose solutions.

	<p>The Mono team (both the community and the Novell employees
	working on it) is pretty much such a group: a group solving
	problems, and moving forward.  

<h3>Interview with a soldier</h3>

	<p>Ran into <a
	href="http://www.sacbee.com/content/opinion/story/9316830p-10241546c.html">this
	interview</a> this morning.   From the Sacramento Bee.

	<p>Incidentally, watched For of War this week, McNamara at
	some point says `We need to win the hearts and minds of the
	Vietnamese people'.  

</summary>
<content>
	<p>Seth has raised some <a
	href="http://www.gnome.org/~seth/blog//mono">valid points</a>
	on the patent problem, as it related to Mono.

	<p>A big problem with everyone raising potential patent
	problems with Mono is not that they are wrong in any way, but
	there are a few problems with it:

	<ul>
	
	  <li>Not using Mono in any shape or form <b>is not a blank
	  waiver against patents</b>.  That means that even if you
	  choose to stick to your beloved C, Python, C++ or anything
	  else, for any new software you write, you are likely to
	  infringe on someone else's patents (or even the same ones
	  that Mono could potentially infringe).

	  <li>Patents can be: <b>declared void</b> with <b>prior
	  art</b> showing that such invention did exist in the past.
	  Alternatively, you can <b>route</b> around it by using a
	  different technique than the one described in the patent to
	  provide the same feature (or something close) to avoid
	  infringing on a patent.

	  <li>Most people have no idea of what a patent is, or how it
	  works.  The actual invention is the claims bit.  Not the
	  introduction, not the summary, not the background, not the
	  references and not the drawings.  They help in making the
	  claims, but they are not the patent itself.  If you want to
	  play patent-lawyer on Internet, you should at least
	  familiarize yourself with the process.

	</ul>

	<p>Now, it is hard to argue with the nay-sayers about
	<b>routing</b> around the patent for two reasons: we do not
	know what might be patented <b>and</b> valid (ie, no prior art
	can be found or properly articulated) and most importantly for
	any given topic we can engage in weeks of discussion on what-if
	scenarios.

	<p>We do not plan on infringing patents, and if were to
	infringe on patent, we will either find prior art that renders
	that particular claim invalid, or rewrite the code to work in
	a different form.  We do not like software patents, but we
	will abide by the legal rules.

	<p>If you can not think of a different way of running a C#
	program than the one that exists today, you are not a very
	imaginative/innovative programmer.  The worst possible
	scenario is not `They will stop distribution forever'.  The
	worst possible scenario is `They can stop distribution until
	we find a workaround'.

	<p>And again, remember, the software patents problem is not
	limited to the specific instance of Mono.  Everything Seth
	said applies equally well to every bit of our open source
	stack today: do we infringe on a Microsoft patent?  Do *you*
	know for sure you do not?  Have you performed a patent search?
	On every possible bit?

	<p>Red Hat has chosen to adopt Java (despite the same
	potential problems with patents) and has decided that it is in
	their interest not to use C#/Mono.  Like Red Hat's Seth
	states: this is self inflicted damage on their part, and they
	will not be able to ship any of our leading edge GPL code
	(Simias, iFolder, F-Spot or any of our future development
	tools).   

	<p>Red Hat could either stop whining, and have their
	developers work in Mono and use Mono, and help us fight bogus
	patents or route around them, or they can keep posting to
	their blogs more fear-mongering.

	<p>Andy Satori has posted his insight <a
	href="http://lists.ximian.com/archives/public/mono-list/2004-May/020454.html">here</a>.

	<p>If you are going to reply, I just ask you that you take a
	step back, and for every instance of the word `Mono' replace
	it with every major open source project today `gnu libc',
	`linux kernel', `Open Office', `samba', `x11', `cairo',
	`gtk+', `qt', `binutils', `gcc', gnome', `qt', `mozilla', `my
	favorite file system', use your imagination.  

	<p>Does your foe have a patent to it?  Or someone that can be
	acquired by your foe?

<h3>On Stop Energy: my policy</h3>

	<p>Most people operate in <a
	href="http://www.userland.com/whatIsStopEnergy">Stop
	Energy</a> mode, so I typically ignore them, and keep moving.

	<p>A small story I like to tell people: when I started writing
	Gnumeric, I was very afraid of one thing: the computational
	engine.  How do we recalculate the value of cells when a
	change happens?  How do we make this perform well?  How do we
	do iterative computations?  How do you resolve recursive
	references?

	<p>All of those problems were fairly scary, and I did not have
	an answer to them.  I looked at all the source code I could
	find for spreadsheets around that time, and none of it did
	even a remotely good job: it was all pretty amateur, and none
	of it really did anything remotely close to what commercial
	software did.

	<p>I started work on Gnumeric nonetheless, figuring `When the
	time comes, I will face that problem', and spent the next
	three months making sure that Gnumeric was visually pleasant,
	that it looked like Excel, and that the "feel" was right.  I
	tried to implement computations trivially during that time in
	a couple hour hack and that failed miserably.

	<p>By the third month, I decided I would not touch a computer
	until I figured out an algorithm for doing these computations,
	I took a pencil and a notebook and went to write down the
	steps.  Surprisingly after a few hours of work I had something
	that looked correct.  

	<p>That same day I implemented the computational engine with
	the features I wanted and it just worked!  

	<p>What I like about this story, is that I could have given up
	at any point since there was a large problem ahead of me: a
	problem I had no answers to.  And I see this with many free
	software developers, students and even in normal social
	situations: people stop doing things because they see a big
	problem ahead of them that they can not possibly conceive
	working around.  My advise to every young programmer is to
	start writing code and delay addressing imaginary problems
	until they become real.

	<p>I like people who find and propose solutions.

	<p>The Mono team (both the community and the Novell employees
	working on it) is pretty much such a group: a group solving
	problems, and moving forward.  

<h3>Interview with a soldier</h3>

	<p>Ran into <a
	href="http://www.sacbee.com/content/opinion/story/9316830p-10241546c.html">this
	interview</a> this morning.   From the Sacramento Bee.

	<p>Incidentally, watched For of War this week, McNamara at
	some point says `We need to win the hearts and minds of the
	Vietnamese people'.  

</content>
</entry>
<entry>
<title>19 May 2004: GCC for Mono</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f19%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-19T13:55:00-04:00</modified>
<issued>2004-05-19T13:55:00-04:00</issued>
<created>2004-05-19T13:55:00-04:00</created>
<summary>
	<p><a href="http://www.advogato.org/person/kristian/">Kristian
	Rietveld</a> picked up on the <a
	href="http://primates.ximian.com/~miguel/archive/2004/Apr-12.html">challenge</a>
	to write a WHIRL to CIL compiler.  This means that any
	languages supported by the GCC WHIRL fork (C, C++ and the two
	Fortrans) could be used as compiler front-ends.</p>

	<p>Kris has a <a
	href="http://www.advogato.org/person/kristian/diary.html?start=26">sample</a>
	of his work so far: a small C program translated to WHIRL
	(gcc), then to CIL (he had to write his own WHIRL reader.</p>

	<p>Congratulations!</p>

<h3>Sweet Interview with Nat Friedman</h3>

	<p>A sweet interview with <a
	href="http://www.eweek.com/article2/0,1759,1594127,00.asp">Nat</a>
	on the Novell Linux Desktop.

<h3>The JBoss soap opera</h3>

	<p>Man, I spent some quality time going over the JBoss <a
	href="http://yro.slashdot.org/article.pl?sid=04/05/18/2043206&mode=nested&tid=108&tid=126&tid=149&tid=156&tid=99">soap
	opera</a>.  I always felt things were not quite right when I
	was reading TheServerSide.


</summary>
<content>
	<p><a href="http://www.advogato.org/person/kristian/">Kristian
	Rietveld</a> picked up on the <a
	href="http://primates.ximian.com/~miguel/archive/2004/Apr-12.html">challenge</a>
	to write a WHIRL to CIL compiler.  This means that any
	languages supported by the GCC WHIRL fork (C, C++ and the two
	Fortrans) could be used as compiler front-ends.</p>

	<p>Kris has a <a
	href="http://www.advogato.org/person/kristian/diary.html?start=26">sample</a>
	of his work so far: a small C program translated to WHIRL
	(gcc), then to CIL (he had to write his own WHIRL reader.</p>

	<p>Congratulations!</p>

<h3>Sweet Interview with Nat Friedman</h3>

	<p>A sweet interview with <a
	href="http://www.eweek.com/article2/0,1759,1594127,00.asp">Nat</a>
	on the Novell Linux Desktop.

<h3>The JBoss soap opera</h3>

	<p>Man, I spent some quality time going over the JBoss <a
	href="http://yro.slashdot.org/article.pl?sid=04/05/18/2043206&mode=nested&tid=108&tid=126&tid=149&tid=156&tid=99">soap
	opera</a>.  I always felt things were not quite right when I
	was reading TheServerSide.


</content>
</entry>
<entry>
<title>17 May 2004: Cathartic moments in software.</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f17%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-17T13:55:00-04:00</modified>
<issued>2004-05-17T13:55:00-04:00</issued>
<created>2004-05-17T13:55:00-04:00</created>
<summary>
	<p>Not everyone gets the importance of free software at once.
	To me the point of no return came when I was using non-Intel
	Linux machines, and could not run any of the new proprietary
	Linux software on the Alpha host we had.

	<p>The Movable Type licensing term changes have done the same
	for a new generation.  Dive into Mark's <a
	href="http://diveintomark.org/archives/2004/05/14/freedom-0">Freedom
	0</a> article rings true.  The same kind of feeling we had
	when we started the Gnome project, we decided to not look away
	with something that was `free enough'.
</summary>
<content>
	<p>Not everyone gets the importance of free software at once.
	To me the point of no return came when I was using non-Intel
	Linux machines, and could not run any of the new proprietary
	Linux software on the Alpha host we had.

	<p>The Movable Type licensing term changes have done the same
	for a new generation.  Dive into Mark's <a
	href="http://diveintomark.org/archives/2004/05/14/freedom-0">Freedom
	0</a> article rings true.  The same kind of feeling we had
	when we started the Gnome project, we decided to not look away
	with something that was `free enough'.
</content>
</entry>
<entry>
<title>14 May 2004: New Mono team members</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f14%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-14T13:55:00-04:00</modified>
<issued>2004-05-14T13:55:00-04:00</issued>
<created>2004-05-14T13:55:00-04:00</created>
<summary>	
	<p>After five months of delays, <a
	href="http://primates.ximian.com/~massi/blog/">Massimiliano
	Mantione</a> has joined the Novell Mono team.   His focus will
	be on compiler optimizations.

	<p>As part of his interview process (which lasted a month),
	Massimiliano completed the arrays bounds check elimination
	feature for the JIT compiler.   Now that he is part of the
	Novell staff he is redoing his work to match the current VM.

<h3>Mono Beta</h3>

	<p>Plenty of good feedback from the Mono Beta 1.  <a
	href="http://primates.ximian.com/~duncan/blog/index.xml">Duncan</a>
	has been taking care of the packaging things, and as of today
	we are shipping zip files with all the packages for those of
	you who did not want to manually download all of the packages
	one by one.
</summary>
<content>	
	<p>After five months of delays, <a
	href="http://primates.ximian.com/~massi/blog/">Massimiliano
	Mantione</a> has joined the Novell Mono team.   His focus will
	be on compiler optimizations.

	<p>As part of his interview process (which lasted a month),
	Massimiliano completed the arrays bounds check elimination
	feature for the JIT compiler.   Now that he is part of the
	Novell staff he is redoing his work to match the current VM.

<h3>Mono Beta</h3>

	<p>Plenty of good feedback from the Mono Beta 1.  <a
	href="http://primates.ximian.com/~duncan/blog/index.xml">Duncan</a>
	has been taking care of the packaging things, and as of today
	we are shipping zip files with all the packages for those of
	you who did not want to manually download all of the packages
	one by one.
</content>
</entry>
<entry>
<title>11 May 2004: Exchange Connector Open Sourced</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f11%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-11T13:55:00-04:00</modified>
<issued>2004-05-11T13:55:00-04:00</issued>
<created>2004-05-11T13:55:00-04:00</created>
<summary>
	<p>Novell has just <a
	href="http://www.novell.com/news/press/archive/2004/05/pr04034.html">open
	sourced</a> the Evolution connector to Exchange.  The code is
	available <a href="http://ftp.ximian.com/">on our ftp
	server</a> or you can <a
	href="http://cvs.gnome.org/viewcvs/evolution-exchange/">browse
	CVS</a>.

	<p>Congratulations to everyone involved!
</summary>
<content>
	<p>Novell has just <a
	href="http://www.novell.com/news/press/archive/2004/05/pr04034.html">open
	sourced</a> the Evolution connector to Exchange.  The code is
	available <a href="http://ftp.ximian.com/">on our ftp
	server</a> or you can <a
	href="http://cvs.gnome.org/viewcvs/evolution-exchange/">browse
	CVS</a>.

	<p>Congratulations to everyone involved!
</content>
</entry>
<entry>
<title>07 May 2004: Shocking Video.</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#5%2f7%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-05-07T13:55:00-04:00</modified>
<issued>2004-05-07T13:55:00-04:00</issued>
<created>2004-05-07T13:55:00-04:00</created>
<summary>
	<p>Was reading Robert Fisk's <a
	href="http://www.zmag.org/content/showarticle.cfm?SectionID=15&ItemID=5472">latest
	article</a> and googled for the keywords.  Here is the
	shocking <a
	href="http://www.hraunfjord.com/apache_killing.mpeg">video</a>.

	<p>Some <a
	href="http://www.thadeusandweez.com/daily.scribble.pages/daily.scribble.archive.index.html">cartoons</a>,
	and a couple of interesting sites: <a
	href="http://www.talkingpointsmemo.com/">Talking Points
	Memo</a> and the <a href="http://mediamatters.org">Media
	Matters</a> web site.
</summary>
<content>
	<p>Was reading Robert Fisk's <a
	href="http://www.zmag.org/content/showarticle.cfm?SectionID=15&ItemID=5472">latest
	article</a> and googled for the keywords.  Here is the
	shocking <a
	href="http://www.hraunfjord.com/apache_killing.mpeg">video</a>.

	<p>Some <a
	href="http://www.thadeusandweez.com/daily.scribble.pages/daily.scribble.archive.index.html">cartoons</a>,
	and a couple of interesting sites: <a
	href="http://www.talkingpointsmemo.com/">Talking Points
	Memo</a> and the <a href="http://mediamatters.org">Media
	Matters</a> web site.
</content>
</entry>
<entry>
<title>26 Apr 2004: Made with Mono</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f26%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-26T13:55:00-04:00</modified>
<issued>2004-04-26T13:55:00-04:00</issued>
<created>2004-04-26T13:55:00-04:00</created>
<summary>
	<p>Jon Johansen's used <a
	href="http://www.go-mono.com">Mono</a> and <a
	href="http://www.monodevelop.org">MonoDevelop</a> to build <a
	href="http://nanocrew.net/blog/apple/huntingplayfair.html">DeDRMS</a>,
	a program used to decrypt the music you purchase from iTunes
	Music Store.  

	<p>I tried it out, and I was able to play the music I had
	purchased on Linux, it is really nice.  

	<p>Johansen was on the #mono channel, and we got a chance to
	look into some of the performance issues in Rijandel.  Ben
	noticed something interesting: plenty of our array access was
	done with a byte value on an array that always had at least
	255 elements.  So he cooked up a <a
	href="http://devservices.go-mono.com/~benm/bytearr.patch">patch</a>
	that does said ABC elimination.

	<p>A more comprehensive patch has been cooked by Massimiliano
	(who joined Novell today to work on Mono) which hopefully will
	make it before Mono Beta 1.

<h3>Roadmapy things</h3>

	<p>A series of dates for the Mono 1.0 have been <a
	href="http://www.go-mono.com/road-to-1.0.html">posted</a>.
</summary>
<content>
	<p>Jon Johansen's used <a
	href="http://www.go-mono.com">Mono</a> and <a
	href="http://www.monodevelop.org">MonoDevelop</a> to build <a
	href="http://nanocrew.net/blog/apple/huntingplayfair.html">DeDRMS</a>,
	a program used to decrypt the music you purchase from iTunes
	Music Store.  

	<p>I tried it out, and I was able to play the music I had
	purchased on Linux, it is really nice.  

	<p>Johansen was on the #mono channel, and we got a chance to
	look into some of the performance issues in Rijandel.  Ben
	noticed something interesting: plenty of our array access was
	done with a byte value on an array that always had at least
	255 elements.  So he cooked up a <a
	href="http://devservices.go-mono.com/~benm/bytearr.patch">patch</a>
	that does said ABC elimination.

	<p>A more comprehensive patch has been cooked by Massimiliano
	(who joined Novell today to work on Mono) which hopefully will
	make it before Mono Beta 1.

<h3>Roadmapy things</h3>

	<p>A series of dates for the Mono 1.0 have been <a
	href="http://www.go-mono.com/road-to-1.0.html">posted</a>.
</content>
</entry>
<entry>
<title>24 Apr 2004: Defining the Game</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f24%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-24T13:55:00-04:00</modified>
<issued>2004-04-24T13:55:00-04:00</issued>
<created>2004-04-24T13:55:00-04:00</created>
<summary>
	<p>Jeff seems to like Cringley's <a
	href="http://www.pbs.org/cringely/pulpit/pulpit20040415.html">statement</a>
	of <i>"The central point was that paying too much attention to
	Microsoft simply allows Microsoft to define the game. And when
	Microsoft gets to define the game, they ALWAYS win."</i>

	<p>A nice statement, but nothing more than a nice statement,
	other than that, its all incorrect.

	<p>Microsoft has won in the past due to many factors, and none
	of them related to `Let them define the game', a couple from a
	list of many:

	<ul>

		<li>They leveraged their monopoly to break into new
		markets.  The most discussed one is when they used
		brute force and anti-competitive strategies to get
		their products into new markets, but in some other
		cases they got fairly good adoption of their products
		with little or no effort: just bundle it with Windows:
		MSN messenger, Media Player.<p>

		<li>Competitors were outmaneuvered or were incompetent
		(See HIgh Stakes No Prisoners).<p>

		<li>People were sleeping at the wheel.

		<p>In 1993-1994, Linux had the promise of becoming the
		best desktop system.  We had real multi-tasking, real
		32-bit OS.  Client and Server in the same system:
		Linux could be used as a server (file sharing, web
		serving), we could run DOS applications with dosemu.
		We had X11: could run applications remotely on a large
		server, and display on small machine.  Linux quickly
		became a vibrant innovative community, and with
		virtual-desktops in our window managers, we could do
		things ten times as fast as Windows users!   TeX was
		of course `much better than Windows, since it focuses
		on the content and the logical layout' and for those
		who did not like that, there was always the "Andrew"
		word processor.  Tcl/Tk was as good as building apps
		with QuickBasic.

		<p>And then Microsoft released Windows 95.

		<li>A few years later, everyone is talking components:
		Netscape is putting IIOP on their client and server
		(ahead of their time, this later became popular as
		web-services on the browser); Xerox ILU; Bonobo;
		KParts; the Borland sponsored event to build a small
		component system that everyone agrees with; language
		bindings are at their top.

		<p>The concensus at that time?  Whatever Microsoft is
		doing is just a thin layer on top of COM/DCOM/Windows
		DNA which to most of us means `same old, same old, we
		are innovating!'.
		
		<p>And then Microsoft comes up with .NET.
	</ul>

	<p>Does something like XAML matter?  Not really.  But it makes
	it simple to create relatively cute apps, by relatively newby
	users, in the same way anyone could build web pages with HTML.

	<p>Does Avalon really matter?  Its a cute toolkit, with tons
	of widgetry, but nothing that we cant do on a weekend, right?

	<p>Does the fact that its built on top of .NET matter?  Well,
	you could argue it has some productivity advantages, security
	features and get into a long discussion of .NET vs Java, but
	its besides the point.

	<p>Everyone is arguing about tiny bits of the equation `We
	have done that with Glade before!', `Gtk/Qt are
	cross-platform!', `We can get the same with good language
	bindings!', `We already have the widgets!', `Cairo is all we
	need', `What do users really want?' and of course `Dont let
	them define the game!'.

	<p>They are all fine points of view, but what makes Longhorn
	dangerous for the viability of Linux on the desktop is that
	the combination of Microsoft deployment power, XAML, Avalon
	and .NET is killer.  It is what Java wanted to do with the
	Web, but with the channel to deploy it and the lessons learned
	from Java mistakes. 

	<p>The combination means that Longhorn apps get the web-like
	deployment <a
	href="http://msdn.microsoft.com/msdnmag/issues/04/05/ClickOnce/default.aspx">benefits</a>:
	develop centrally, deploy centrally, and safely access any
	content with your browser.

	<p>The sandboxed execution in .NET [1] means that you can
	visit <b>any</b> web site and run local rich applications as
	oppposed to web applications without fearing about your data
	security: spyware, trojans and what have you.

	<p>Avalon means also that these new "Web" applications can
	visually integrate with your OS, that can use native dialogs
	can use the functionality in the OS (like the local contact
	picker).
	
	<p>And building fat-clients is arguably easier than building
	good looking, integrated, secure web applications (notice:
	applications, not static web pages).

	<p>And finally, Longhorn <b>will</b> get deployed,
	XAML/Avalon applications <b>will</b> be written, and people
	<b>will</b> consume them.  The worst bit: people will expect
	their desktop to be able to access these "rich" sites.  With
	90% market share, it seems doable.

	<p>Will Avalon only run on Longhorn?  Maybe.  But do not count
	on that.  Microsoft built IE4 for Windows 98, and later
	backported it to Windows 95, Windows 3.11 and moved it to
	HP-UX and Solaris. 

	<p>The reason people are genuinely concerned and are
	discussing these issues is because they do not want to be
	caught sleeping at the wheel again.

	<p>Will this be the end of the world for Linux and the Mac?
	Not likely, many of us will continue using our regular
	applications, and enjoy our nicely usable and consistent
	desktops, but it will leave us out of some markets (just like
	it does today). 

	<p>Btw, the Mozilla folks realized this <a
	href="http://groups.google.com/groups?as_umsgid=40724396.1000303@meer.net">already</a>
	
	<p>[1] Although it was easy to see why .NET supported the Code
	Access Security (CAS) in .NET 1.0, there was no real use for
	it.  With Longhorn/Avalon/XAML it becomes obvious why it was
	implemented.
	
<h3>Planning for the future</h3>
	
	<p>Although some of the discussion has centered around using a
	native toolkit like Gtk+/XUL to build a competitor that would
	have ISV sex-appeal, this is not a good foundation as it wont
	give us Web-like deployment (we need a stack that can be
	secured to run untrusted applications, and we need to be able
	to verify the code that is downloaded, which leaves us with
	Java or .NET).

	<p>The time is short, Microsoft will ship Avalon in 2-3 years,
	and they got a preview of the technology out.   

	<p>I see two possible options:

	<ul>
		<li>Implement Avalon/XAML and ship it with Linux (with
		Mono).

		<li>Come up with our own, competitive stack.
	</ul>

	<p>I think someone will eventually implement Avalon (with or
	without the assistance of the Mono team), its just something
	that developers enjoy doing.  

	<p>If we choose to go in our own direction, there are certain
	strengths in open source that we should employ to get to
	market quickly: requirements, design guidelines, key people
	who could contribute, compatibility requirements and
	deployment platforms.

	<p>We have been referring internally at Novell to the later
	approach as the Salvador platform (after a long debate about
	whether it should be called MiggyLon or Natalon).  
	
	<p>We do not know if and when we would staff such an effort
	but its on the radar. 
	
<h3>The patent issue</h3>

	<p>Are there patents in Avalon?  It is likely that Microsoft
	will try to get some patents on it, but so far there are
	little or no new inventions on Avalon:

	<ul>
		<li>Canvas graphics, persistent objects (Tk Canvas,
		Gnome Canvas)
	
		<li>With AA/vector-based graphics (Gnome AA Canvas)
	
		<li>With animation (Nautilus Andy-branch Canvas items)
	
		<li>With Vector graphics (Gnome Print, librsvg)
	
		<li>With A 2D graphics model (PDF, Libart, Cairo)
	
		<li>With Web-like-Deployment security (SecureTcl, Tcl Plugin, Java)
	
		<li>XAML has been done before (Glade, Qt designer),
		but am not sure that XAML is the best "authoring" model yet.
		The power lies in their deployment power.
	</ul>

</summary>
<content>
	<p>Jeff seems to like Cringley's <a
	href="http://www.pbs.org/cringely/pulpit/pulpit20040415.html">statement</a>
	of <i>"The central point was that paying too much attention to
	Microsoft simply allows Microsoft to define the game. And when
	Microsoft gets to define the game, they ALWAYS win."</i>

	<p>A nice statement, but nothing more than a nice statement,
	other than that, its all incorrect.

	<p>Microsoft has won in the past due to many factors, and none
	of them related to `Let them define the game', a couple from a
	list of many:

	<ul>

		<li>They leveraged their monopoly to break into new
		markets.  The most discussed one is when they used
		brute force and anti-competitive strategies to get
		their products into new markets, but in some other
		cases they got fairly good adoption of their products
		with little or no effort: just bundle it with Windows:
		MSN messenger, Media Player.<p>

		<li>Competitors were outmaneuvered or were incompetent
		(See HIgh Stakes No Prisoners).<p>

		<li>People were sleeping at the wheel.

		<p>In 1993-1994, Linux had the promise of becoming the
		best desktop system.  We had real multi-tasking, real
		32-bit OS.  Client and Server in the same system:
		Linux could be used as a server (file sharing, web
		serving), we could run DOS applications with dosemu.
		We had X11: could run applications remotely on a large
		server, and display on small machine.  Linux quickly
		became a vibrant innovative community, and with
		virtual-desktops in our window managers, we could do
		things ten times as fast as Windows users!   TeX was
		of course `much better than Windows, since it focuses
		on the content and the logical layout' and for those
		who did not like that, there was always the "Andrew"
		word processor.  Tcl/Tk was as good as building apps
		with QuickBasic.

		<p>And then Microsoft released Windows 95.

		<li>A few years later, everyone is talking components:
		Netscape is putting IIOP on their client and server
		(ahead of their time, this later became popular as
		web-services on the browser); Xerox ILU; Bonobo;
		KParts; the Borland sponsored event to build a small
		component system that everyone agrees with; language
		bindings are at their top.

		<p>The concensus at that time?  Whatever Microsoft is
		doing is just a thin layer on top of COM/DCOM/Windows
		DNA which to most of us means `same old, same old, we
		are innovating!'.
		
		<p>And then Microsoft comes up with .NET.
	</ul>

	<p>Does something like XAML matter?  Not really.  But it makes
	it simple to create relatively cute apps, by relatively newby
	users, in the same way anyone could build web pages with HTML.

	<p>Does Avalon really matter?  Its a cute toolkit, with tons
	of widgetry, but nothing that we cant do on a weekend, right?

	<p>Does the fact that its built on top of .NET matter?  Well,
	you could argue it has some productivity advantages, security
	features and get into a long discussion of .NET vs Java, but
	its besides the point.

	<p>Everyone is arguing about tiny bits of the equation `We
	have done that with Glade before!', `Gtk/Qt are
	cross-platform!', `We can get the same with good language
	bindings!', `We already have the widgets!', `Cairo is all we
	need', `What do users really want?' and of course `Dont let
	them define the game!'.

	<p>They are all fine points of view, but what makes Longhorn
	dangerous for the viability of Linux on the desktop is that
	the combination of Microsoft deployment power, XAML, Avalon
	and .NET is killer.  It is what Java wanted to do with the
	Web, but with the channel to deploy it and the lessons learned
	from Java mistakes. 

	<p>The combination means that Longhorn apps get the web-like
	deployment <a
	href="http://msdn.microsoft.com/msdnmag/issues/04/05/ClickOnce/default.aspx">benefits</a>:
	develop centrally, deploy centrally, and safely access any
	content with your browser.

	<p>The sandboxed execution in .NET [1] means that you can
	visit <b>any</b> web site and run local rich applications as
	oppposed to web applications without fearing about your data
	security: spyware, trojans and what have you.

	<p>Avalon means also that these new "Web" applications can
	visually integrate with your OS, that can use native dialogs
	can use the functionality in the OS (like the local contact
	picker).
	
	<p>And building fat-clients is arguably easier than building
	good looking, integrated, secure web applications (notice:
	applications, not static web pages).

	<p>And finally, Longhorn <b>will</b> get deployed,
	XAML/Avalon applications <b>will</b> be written, and people
	<b>will</b> consume them.  The worst bit: people will expect
	their desktop to be able to access these "rich" sites.  With
	90% market share, it seems doable.

	<p>Will Avalon only run on Longhorn?  Maybe.  But do not count
	on that.  Microsoft built IE4 for Windows 98, and later
	backported it to Windows 95, Windows 3.11 and moved it to
	HP-UX and Solaris. 

	<p>The reason people are genuinely concerned and are
	discussing these issues is because they do not want to be
	caught sleeping at the wheel again.

	<p>Will this be the end of the world for Linux and the Mac?
	Not likely, many of us will continue using our regular
	applications, and enjoy our nicely usable and consistent
	desktops, but it will leave us out of some markets (just like
	it does today). 

	<p>Btw, the Mozilla folks realized this <a
	href="http://groups.google.com/groups?as_umsgid=40724396.1000303@meer.net">already</a>
	
	<p>[1] Although it was easy to see why .NET supported the Code
	Access Security (CAS) in .NET 1.0, there was no real use for
	it.  With Longhorn/Avalon/XAML it becomes obvious why it was
	implemented.
	
<h3>Planning for the future</h3>
	
	<p>Although some of the discussion has centered around using a
	native toolkit like Gtk+/XUL to build a competitor that would
	have ISV sex-appeal, this is not a good foundation as it wont
	give us Web-like deployment (we need a stack that can be
	secured to run untrusted applications, and we need to be able
	to verify the code that is downloaded, which leaves us with
	Java or .NET).

	<p>The time is short, Microsoft will ship Avalon in 2-3 years,
	and they got a preview of the technology out.   

	<p>I see two possible options:

	<ul>
		<li>Implement Avalon/XAML and ship it with Linux (with
		Mono).

		<li>Come up with our own, competitive stack.
	</ul>

	<p>I think someone will eventually implement Avalon (with or
	without the assistance of the Mono team), its just something
	that developers enjoy doing.  

	<p>If we choose to go in our own direction, there are certain
	strengths in open source that we should employ to get to
	market quickly: requirements, design guidelines, key people
	who could contribute, compatibility requirements and
	deployment platforms.

	<p>We have been referring internally at Novell to the later
	approach as the Salvador platform (after a long debate about
	whether it should be called MiggyLon or Natalon).  
	
	<p>We do not know if and when we would staff such an effort
	but its on the radar. 
	
<h3>The patent issue</h3>

	<p>Are there patents in Avalon?  It is likely that Microsoft
	will try to get some patents on it, but so far there are
	little or no new inventions on Avalon:

	<ul>
		<li>Canvas graphics, persistent objects (Tk Canvas,
		Gnome Canvas)
	
		<li>With AA/vector-based graphics (Gnome AA Canvas)
	
		<li>With animation (Nautilus Andy-branch Canvas items)
	
		<li>With Vector graphics (Gnome Print, librsvg)
	
		<li>With A 2D graphics model (PDF, Libart, Cairo)
	
		<li>With Web-like-Deployment security (SecureTcl, Tcl Plugin, Java)
	
		<li>XAML has been done before (Glade, Qt designer),
		but am not sure that XAML is the best "authoring" model yet.
		The power lies in their deployment power.
	</ul>

</content>
</entry>
<entry>
<title>19 Apr 2004: Usenix VM Conference</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f19%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-19T13:55:00-04:00</modified>
<issued>2004-04-19T13:55:00-04:00</issued>
<created>2004-04-19T13:55:00-04:00</created>
<summary>
	<p>I will be doing the keynote at the <a
	href="http://www.usenix.org/events/vm04/">Usenix Virtual
	Machine Research and Technology Symposium</a> on May 6 and 7
	in California next month.

	<p>Am also attending the <a
	href="http://www.usenix.org/events/usenix04/">Usenix
	Conference</a> in Boston this summer.

<h3>Amazon Search</h3>

	<p>Nice new <a href="http://a9.com">search engine</a> from Amazon.
</summary>
<content>
	<p>I will be doing the keynote at the <a
	href="http://www.usenix.org/events/vm04/">Usenix Virtual
	Machine Research and Technology Symposium</a> on May 6 and 7
	in California next month.

	<p>Am also attending the <a
	href="http://www.usenix.org/events/usenix04/">Usenix
	Conference</a> in Boston this summer.

<h3>Amazon Search</h3>

	<p>Nice new <a href="http://a9.com">search engine</a> from Amazon.
</content>
</entry>
<entry>
<title>18 Apr 2004: Pathscale and Open64</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f18%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-18T13:55:00-04:00</modified>
<issued>2004-04-18T13:55:00-04:00</issued>
<created>2004-04-18T13:55:00-04:00</created>
<summary>
	<p>Greg was nice enough to point me to the <a
	href="http://www.pathscale.com/products1.html">PathScale</a>
	compiler suite: a high performance compiler suite for AMD64.
	Pathscale's compiler is based on Open64, but has reportedly
	updated its C/C++ compiler frontends to a recent GCC (as
	opposed to the current Open64 derivative compilers).

	<p>OpenScale is lead by Fred Chow, an ex-SGI developer that
	created WHIRL, and later Pro64.

	<p>So as a starting point for a Managed C++ compiler,
	PathScale <a
	href="http://www.pathscale.com/gpl.html">sources</a> might be
	a better option.

	<p>This product shows one of the splits that people were
	afraid of to circumvent the GPL: the front-ends which are
	fairly complex (C++) has been split out from the backend and a
	proprietary highly optimizing compiler has been developed for
	the AMD64.  It was just a matter of time before someone did
	this though.
</summary>
<content>
	<p>Greg was nice enough to point me to the <a
	href="http://www.pathscale.com/products1.html">PathScale</a>
	compiler suite: a high performance compiler suite for AMD64.
	Pathscale's compiler is based on Open64, but has reportedly
	updated its C/C++ compiler frontends to a recent GCC (as
	opposed to the current Open64 derivative compilers).

	<p>OpenScale is lead by Fred Chow, an ex-SGI developer that
	created WHIRL, and later Pro64.

	<p>So as a starting point for a Managed C++ compiler,
	PathScale <a
	href="http://www.pathscale.com/gpl.html">sources</a> might be
	a better option.

	<p>This product shows one of the splits that people were
	afraid of to circumvent the GPL: the front-ends which are
	fairly complex (C++) has been split out from the backend and a
	proprietary highly optimizing compiler has been developed for
	the AMD64.  It was just a matter of time before someone did
	this though.
</content>
</entry>
<entry>
<title>15 Apr 2004: Another Anonymous Methods Code Drop</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f15%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-15T13:55:00-04:00</modified>
<issued>2004-04-15T13:55:00-04:00</issued>
<created>2004-04-15T13:55:00-04:00</created>
<summary>
	<p>A <a
	href="http://primates.ximian.com/~miguel/anonymous-5.patch">fresh
	patch</a> and a full <a
	href="http://primates.ximian.com/~miguel/anonymous-5.tar.gz">tarball</a>
	for MCS.

<h3>Managed C++</h3>

	<p>I read <a
	href="http://www.advogato.org/person/Anthony/">Anthony
	Green's</a> feedback on using Open64 as the foundation for
	implementing a <a
	href="http://www.gotdotnet.com/team/cplusplus/articles/mcspec.doc">Managed
	C++ compiler</a>.  I respectfully disagree with his opinion.

	<p>Let me explain why Open64 is the best starting point for
	implementing Managed C++.

	<p>First, the requirements:

	<ul>
		<li>A C++ compiler that can generate images in the
		Common Intermediate Language (CIL).  The intermediate
		language for the ECMA 335 virtual machine. 

		<br>
		Essentially, any existing C or C++ code needs to be
		compiled into CIL code.

		<li>Expand the language to include the Managed C++
		extensions, in some cases the extensions might
		restrict what you can do.

		<li>High level information must propagate to the
		low-level CIL layer to provide introspection
		capabilities, attributes, and become a full CLS
		consumer and producer. 
	</ul>

	<p>Since C++ is a language of titanic dimensions, it is not
	one that you want to reimplement.  Your best choice is to pick
	an existing C++ compiler.  In the case of the free software
	community, that means gcc or any of its forks.

	<p>The question is whether GCC's internal IR can be
	retargetted to produce code for the stack-based CIL and
	whether you can propagate the extra available metadata.  The
	later seems like a problem that we would have in both Open64
	and gcc.

	<p>Now what makes Open64 interesting is the fact that we can
	achieve the first goal without touching GCC: C and C++
	compilation would be performed with the Open64 compiler down
	to WHIRL and then a new generic WHIRL-to-CIL compiler is
	produced that generates the files we want.  We do not have to
	mess or touch any of the existing GCC internals (it is a
	difficult code base to work with). 

	<p>The above is very similar to <a
	href="http://www.ikvm.net">IKVM's</a> JVM to CIL compiler:
	the input "language" is an IR, the output language is a
	different IR. 

	<p>The fact that Open64 does not target the x86 in a way is
	irrelevant, because we are not interested in targeting the
	x86.  We are interested in targeting the CIL.

	<p>If we were to use the current GCC, we would have to
	intercept a good stage in the compiler, and most likely deal
	with RTL and produce bytecodes for CIL.  The RTL is hard to
	penetrate and deeply linked to gcc internals.  WHIRL is
	independent, well documented, and has various tools to
	process, consume and analyze the various WHIRL stages.

	<p>Finally there is the point of the FSF and the GCC
	maintainers refusing to make structural changes to GCC
	on philosophical grounds.  A split that would encourage the
	creation of proprietary front-end and back-end systems.

	<p>Not only does this mean that its better to work with the
	Open64 fork of GCC which has already made this pragmatic
	decision and is a better foundation for targeting the CIL, but
	our goals are more aligned than those of the GCC maintainers. 

<h3>Update: Open64</h3>

	<p>The latest version of Open64 folded in the changes from
	Intel and ICT.
</summary>
<content>
	<p>A <a
	href="http://primates.ximian.com/~miguel/anonymous-5.patch">fresh
	patch</a> and a full <a
	href="http://primates.ximian.com/~miguel/anonymous-5.tar.gz">tarball</a>
	for MCS.

<h3>Managed C++</h3>

	<p>I read <a
	href="http://www.advogato.org/person/Anthony/">Anthony
	Green's</a> feedback on using Open64 as the foundation for
	implementing a <a
	href="http://www.gotdotnet.com/team/cplusplus/articles/mcspec.doc">Managed
	C++ compiler</a>.  I respectfully disagree with his opinion.

	<p>Let me explain why Open64 is the best starting point for
	implementing Managed C++.

	<p>First, the requirements:

	<ul>
		<li>A C++ compiler that can generate images in the
		Common Intermediate Language (CIL).  The intermediate
		language for the ECMA 335 virtual machine. 

		<br>
		Essentially, any existing C or C++ code needs to be
		compiled into CIL code.

		<li>Expand the language to include the Managed C++
		extensions, in some cases the extensions might
		restrict what you can do.

		<li>High level information must propagate to the
		low-level CIL layer to provide introspection
		capabilities, attributes, and become a full CLS
		consumer and producer. 
	</ul>

	<p>Since C++ is a language of titanic dimensions, it is not
	one that you want to reimplement.  Your best choice is to pick
	an existing C++ compiler.  In the case of the free software
	community, that means gcc or any of its forks.

	<p>The question is whether GCC's internal IR can be
	retargetted to produce code for the stack-based CIL and
	whether you can propagate the extra available metadata.  The
	later seems like a problem that we would have in both Open64
	and gcc.

	<p>Now what makes Open64 interesting is the fact that we can
	achieve the first goal without touching GCC: C and C++
	compilation would be performed with the Open64 compiler down
	to WHIRL and then a new generic WHIRL-to-CIL compiler is
	produced that generates the files we want.  We do not have to
	mess or touch any of the existing GCC internals (it is a
	difficult code base to work with). 

	<p>The above is very similar to <a
	href="http://www.ikvm.net">IKVM's</a> JVM to CIL compiler:
	the input "language" is an IR, the output language is a
	different IR. 

	<p>The fact that Open64 does not target the x86 in a way is
	irrelevant, because we are not interested in targeting the
	x86.  We are interested in targeting the CIL.

	<p>If we were to use the current GCC, we would have to
	intercept a good stage in the compiler, and most likely deal
	with RTL and produce bytecodes for CIL.  The RTL is hard to
	penetrate and deeply linked to gcc internals.  WHIRL is
	independent, well documented, and has various tools to
	process, consume and analyze the various WHIRL stages.

	<p>Finally there is the point of the FSF and the GCC
	maintainers refusing to make structural changes to GCC
	on philosophical grounds.  A split that would encourage the
	creation of proprietary front-end and back-end systems.

	<p>Not only does this mean that its better to work with the
	Open64 fork of GCC which has already made this pragmatic
	decision and is a better foundation for targeting the CIL, but
	our goals are more aligned than those of the GCC maintainers. 

<h3>Update: Open64</h3>

	<p>The latest version of Open64 folded in the changes from
	Intel and ICT.
</content>
</entry>
<entry>
<title>12 Apr 2004: Fascinated by the JIT</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f12%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-12T13:55:00-04:00</modified>
<issued>2004-04-12T13:55:00-04:00</issued>
<created>2004-04-12T13:55:00-04:00</created>
<summary>
	<p>Some people think that I wrote the Mono JIT.  I did not.
	Dietmar, Paolo, Zoltan and Martin are the people who have
	hacked on the JIT engine in Mono.

	<p>Recently, as a side project, I have been playing with the
	JIT a bit to improve some code generation here and there, and
	together with Ben we are learning how it works internally, it
	is fascinating to watch it in action.

	<p>We have been using a simple example: String.GetHashCode
	hoping to get things to the point where the JIT output matches
	GCC -O3.  The code is slightly smaller than GCC, but it is
	wasting two registers, so in a tight loop it ends up placing a
	local variable on the stack which has a high impact on a tight
	loop. 

<h3>Managed C++ and Mono</h3>

	<p>Someone on IRC pointed me a few days ago to <a
	href="http://open64.sourceforge.net/">Open64</a>.  A compiler
	suite that includes C, C++ and Fortrans that generate a new
	intermediate representation called `WHIRL'.

	<p>Some of the compiler front-ends are the GNU compiler front
	ends that have been re-targeted to generate WHIRL instead of
	RTL.  This is fascinating because it means we can now
	seriously consider implementing the ECMA managed extensions to
	C++ (the job of moving to a non-RTL IR was done by SGI).

	<p>It also means that any compiler that is moved to generate
	WHIRL could run on any ECMA VM.

	<p>You can get the WHIRL IR documentation from <a
	href="http://prdownloads.sourceforge.net/open64/whirl.pdf?use_mirror=aleron">here</a>

<h3>CIL image manipulation</h3>

	<p>This topic keeps coming up: are there tools to manipulate
	CIL images (instrument code: pre- and post- processing, add
	classes, remove classes, trim methods, replace methods, append
	instructions) and sometime ago the fine folks at the
	University of Coimbra have implemented such a tool: <a
	href="http://rail.dei.uc.pt/index.htm">Runtime Assembly
	Instrumentation Library</a>
	
<h3>In Chicago</h3>

	<p>The other day Nat and I met David Vaskevitch, Microsoft's
	CTO.   We went dancing. 
	<p>
	<img src="http://www.nat.org/2004/april/surrounded.jpg">

</summary>
<content>
	<p>Some people think that I wrote the Mono JIT.  I did not.
	Dietmar, Paolo, Zoltan and Martin are the people who have
	hacked on the JIT engine in Mono.

	<p>Recently, as a side project, I have been playing with the
	JIT a bit to improve some code generation here and there, and
	together with Ben we are learning how it works internally, it
	is fascinating to watch it in action.

	<p>We have been using a simple example: String.GetHashCode
	hoping to get things to the point where the JIT output matches
	GCC -O3.  The code is slightly smaller than GCC, but it is
	wasting two registers, so in a tight loop it ends up placing a
	local variable on the stack which has a high impact on a tight
	loop. 

<h3>Managed C++ and Mono</h3>

	<p>Someone on IRC pointed me a few days ago to <a
	href="http://open64.sourceforge.net/">Open64</a>.  A compiler
	suite that includes C, C++ and Fortrans that generate a new
	intermediate representation called `WHIRL'.

	<p>Some of the compiler front-ends are the GNU compiler front
	ends that have been re-targeted to generate WHIRL instead of
	RTL.  This is fascinating because it means we can now
	seriously consider implementing the ECMA managed extensions to
	C++ (the job of moving to a non-RTL IR was done by SGI).

	<p>It also means that any compiler that is moved to generate
	WHIRL could run on any ECMA VM.

	<p>You can get the WHIRL IR documentation from <a
	href="http://prdownloads.sourceforge.net/open64/whirl.pdf?use_mirror=aleron">here</a>

<h3>CIL image manipulation</h3>

	<p>This topic keeps coming up: are there tools to manipulate
	CIL images (instrument code: pre- and post- processing, add
	classes, remove classes, trim methods, replace methods, append
	instructions) and sometime ago the fine folks at the
	University of Coimbra have implemented such a tool: <a
	href="http://rail.dei.uc.pt/index.htm">Runtime Assembly
	Instrumentation Library</a>
	
<h3>In Chicago</h3>

	<p>The other day Nat and I met David Vaskevitch, Microsoft's
	CTO.   We went dancing. 
	<p>
	<img src="http://www.nat.org/2004/april/surrounded.jpg">

</content>
</entry>
<entry>
<title>10 Apr 2004: Blogs are the TV of the Internet</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f10%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-10T13:55:00-04:00</modified>
<issued>2004-04-10T13:55:00-04:00</issued>
<created>2004-04-10T13:55:00-04:00</created>
<summary>
	<p>Blogs are the TV of the Internet.  Reading them is fun, but
	they are not particularly challenging.

	<p>Plenty of channels to choose from though.
</summary>
<content>
	<p>Blogs are the TV of the Internet.  Reading them is fun, but
	they are not particularly challenging.

	<p>Plenty of channels to choose from though.
</content>
</entry>
<entry>
<title>05 Apr 2004: Spam</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f5%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-05T13:55:00-04:00</modified>
<issued>2004-04-05T13:55:00-04:00</issued>
<created>2004-04-05T13:55:00-04:00</created>
<summary>
	<p>My e-mail now consists of 40% of spam after it has gone
	through SpamAssassin, in the mornings or weekends it is 50% of
	it.

	<p>These days I use Mutt to manually remove the spam before I
	incorporate my e-mail into Evolution where the mail gets split
	in plenty of folders (and would make spam removal harder).

	<p>Is everyone else getting this same volume of trash?

<h3>Big News of the Day</h3>

	<p>Of course, the big news is that Microsoft has released an
	internal project called "WiX" as open source and is being
	hosted in <a href="http://sourceforge.net">SourceForge</a>.  A
	good move, since it gives a lot of people confidence that the
	license used is an open source license, without having to
	spend some quality time reading every sentence of a new
	license.

	<p>From the <a href="http://blogs.msdn.com/robmen">blog entry
	from one of the authors</a> you can see that Stephen Walli was
	behind making this happen.  I first saw Stephen doing a talk
	on startups and VCs at Usenix, on the early days of Ximian,
	and I remember taking notes frantically.  Later I had a chance
	to meet him at OSCON in Portland.
</summary>
<content>
	<p>My e-mail now consists of 40% of spam after it has gone
	through SpamAssassin, in the mornings or weekends it is 50% of
	it.

	<p>These days I use Mutt to manually remove the spam before I
	incorporate my e-mail into Evolution where the mail gets split
	in plenty of folders (and would make spam removal harder).

	<p>Is everyone else getting this same volume of trash?

<h3>Big News of the Day</h3>

	<p>Of course, the big news is that Microsoft has released an
	internal project called "WiX" as open source and is being
	hosted in <a href="http://sourceforge.net">SourceForge</a>.  A
	good move, since it gives a lot of people confidence that the
	license used is an open source license, without having to
	spend some quality time reading every sentence of a new
	license.

	<p>From the <a href="http://blogs.msdn.com/robmen">blog entry
	from one of the authors</a> you can see that Stephen Walli was
	behind making this happen.  I first saw Stephen doing a talk
	on startups and VCs at Usenix, on the early days of Ximian,
	and I remember taking notes frantically.  Later I had a chance
	to meet him at OSCON in Portland.
</content>
</entry>
<entry>
<title>04 Apr 2004: C# Compiler</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f4%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-04T13:55:00-04:00</modified>
<issued>2004-04-04T13:55:00-04:00</issued>
<created>2004-04-04T13:55:00-04:00</created>
<summary>
	<p>As I make slow progress on <b>Anonymous Methods</b> on the C#
	compiler -due to some very embarassing assumption on my part-
	but most issues have been solved now.  Am now implementing
	parameter capturing and must finish the field access reference
	from an anonymous method, fix a couple of regressions with
	iterators and commit quickly to CVS.
	
	<a href="http://primates.ximian.com/~martin/blog/">Martin
	Baulig</a> has been going through the C# <b>generics spec</b>
	item by item double-checking that his compiler has everything
	that we are supposed to have (Generic tests today amount to
	20% of our positive tests, and 10% of our negative tests).  He
	has finished with the generics spec as far as the ECMA working
	draft is concerned, but its lacking some of the latest
	additions that were freshly submitted in January.

	<p>Martin also worked on the new alias features in C# 2.0 and
	some of that code is already on the CVS tree.

	<p>Reflection.Emit is sadly not complete enough to build our
	generics C# compiler (even with the recently released .NET
	Framework 2.0 preview) so we had to resort to more hidden
	methods in our Reflection.Emit API which are only available to
	our compiler.  We hope to post the list of our API needs in
	case Microsoft is interested in exposing these kind of changes
	in their implementation.

	<p>At the PDC in one of the compiler BOFs, <a
	href="http://weblogs.asp.net/brada">Brad Abrams</a> asked if
	people had written a compiler that followed the Common
	Language Specification (CLS) rules and very few people
	actually said they had.  Although we had a C# compiler, we had
	not implemented the CLS rules for it.

	<p>Marek Safar recently contributed the CLS support for our C#
	compiler.  The initial patch is about two months old, we went
	through various code reviews before the code could land on
	CVS: the traidional review for maintanability, style and
	performance was done before we could take his patch.  Marek
	did a fantastic job addressing every concern that Martin and
	myself had.  It turned out that the CLS tests have a minimal
	impact on compilation time.

	<p><b>Partial Classes</b> is another feature that more and
	more people are asking about.  On the surface you would think
	its trivial to implement it.  And in fact most of it is
	trivial to implement, except that there is a tiny little
	clause in the spec that states that type lookup must be
	performed using the current list of using declarations.  The
	problem is that the list of using declarations might be
	different from file to file, so in two different pieces of a
	partial class "MyType" might have a different meaning.

	<p>Partial classes are debatable an ugly hack, but at least
	this rules make sense in terms of doing what the programmer
	expects.

	<p>Implementation wise, it means that we need to do a lot of
	code shuffling to implement it, and it is not something that
	we are likely going to have by Mono 1.0.
</summary>
<content>
	<p>As I make slow progress on <b>Anonymous Methods</b> on the C#
	compiler -due to some very embarassing assumption on my part-
	but most issues have been solved now.  Am now implementing
	parameter capturing and must finish the field access reference
	from an anonymous method, fix a couple of regressions with
	iterators and commit quickly to CVS.
	
	<a href="http://primates.ximian.com/~martin/blog/">Martin
	Baulig</a> has been going through the C# <b>generics spec</b>
	item by item double-checking that his compiler has everything
	that we are supposed to have (Generic tests today amount to
	20% of our positive tests, and 10% of our negative tests).  He
	has finished with the generics spec as far as the ECMA working
	draft is concerned, but its lacking some of the latest
	additions that were freshly submitted in January.

	<p>Martin also worked on the new alias features in C# 2.0 and
	some of that code is already on the CVS tree.

	<p>Reflection.Emit is sadly not complete enough to build our
	generics C# compiler (even with the recently released .NET
	Framework 2.0 preview) so we had to resort to more hidden
	methods in our Reflection.Emit API which are only available to
	our compiler.  We hope to post the list of our API needs in
	case Microsoft is interested in exposing these kind of changes
	in their implementation.

	<p>At the PDC in one of the compiler BOFs, <a
	href="http://weblogs.asp.net/brada">Brad Abrams</a> asked if
	people had written a compiler that followed the Common
	Language Specification (CLS) rules and very few people
	actually said they had.  Although we had a C# compiler, we had
	not implemented the CLS rules for it.

	<p>Marek Safar recently contributed the CLS support for our C#
	compiler.  The initial patch is about two months old, we went
	through various code reviews before the code could land on
	CVS: the traidional review for maintanability, style and
	performance was done before we could take his patch.  Marek
	did a fantastic job addressing every concern that Martin and
	myself had.  It turned out that the CLS tests have a minimal
	impact on compilation time.

	<p><b>Partial Classes</b> is another feature that more and
	more people are asking about.  On the surface you would think
	its trivial to implement it.  And in fact most of it is
	trivial to implement, except that there is a tiny little
	clause in the spec that states that type lookup must be
	performed using the current list of using declarations.  The
	problem is that the list of using declarations might be
	different from file to file, so in two different pieces of a
	partial class "MyType" might have a different meaning.

	<p>Partial classes are debatable an ugly hack, but at least
	this rules make sense in terms of doing what the programmer
	expects.

	<p>Implementation wise, it means that we need to do a lot of
	code shuffling to implement it, and it is not something that
	we are likely going to have by Mono 1.0.
</content>
</entry>
<entry>
<title>03 Apr 2004: Nice Gnome writeup</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f3%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-03T13:55:00-05:00</modified>
<issued>2004-04-03T13:55:00-05:00</issued>
<created>2004-04-03T13:55:00-05:00</created>
<summary>
	<p>Erik pointed me to this nice <a
	href="http://www.nearwildheaven.com/GNOME/">writeup</a> on the
	usability of Gnome given recent debates on the topic.
</summary>
<content>
	<p>Erik pointed me to this nice <a
	href="http://www.nearwildheaven.com/GNOME/">writeup</a> on the
	usability of Gnome given recent debates on the topic.
</content>
</entry>
<entry>
<title>02 Apr 2004: Now that Sun and Microsoft are buddies</title>
<contributor>
<name>Miguel de Icaza</name>
<url>http://primates.ximian.com/~miguel/activity-log.php</url>
<email>miguel@novell.com</email>
</contributor>
<id>http://primates.ximian.com/~miguel/all.html#4%2f2%2f2004%201%3a55%3a00%20PM</id>
<modified>2004-04-02T13:55:00-05:00</modified>
<issued>2004-04-02T13:55:00-05:00</issued>
<created>2004-04-02T13:55:00-05:00</created>
<summary>
	<p>I am counting the minutes for Sun to ship our Mono
	implementation for Solaris.  Maybe we can still make it to
	the Solaris 10 release.

	<p>Just picture the benefits, out of the box free C# compiler
	on Solaris SPARC and Solaris Intel.  Out of the box ASP.NET
	and ADO.NET on SPARC, and the Gtk# bindings for writing
	applications for the Java Desktop System.

	<p>Not to mention that they get the industry's most sexy JIT
	compiler for free.

	<p>I am walking with an extra cell phone battery in case
	McNealy or Schwartz decide to call me up over the weekend to
	discuss potential agreements (if I dont pick up, please leave
	a message, the wonders of ATT wireless).
</summary>
<content>
	<p>I am counting the minutes for Sun to ship our Mono
	implementation for Solaris.  Maybe we can still make it to
	the Solaris 10 release.

	<p>Just picture the benefits, out of the box free C# compiler
	on Solaris SPARC and Solaris Intel.  Out of the box ASP.NET
	and ADO.NET on SPARC, and the Gtk# bindings for writing
	applications for the Java Desktop System.

	<p>Not to mention that they get the industry's most sexy JIT
	compiler for free.

	<p>I am walking with an extra cell phone battery in case
	McNealy or Schwartz decide to call me up over the weekend to
	discuss potential agreements (if I dont pick up, please leave
	a message, the wonders of ATT wireless).
</content>
</entry>
</feed>
