//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace SnCore.Web.Soap.Tests.WebLocationService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebLocationServiceSoap", Namespace="http://www.vestris.com/sncore/ns/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfNeighborhood))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfAccountCity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfCity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfState))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfCountry))]
    public partial class WebLocationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateOrUpdateCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountryByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountriesWithDefaultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCountriesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCountryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStateByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesByCountryIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesByCountryIdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesByCountryNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatesByCountryNameCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountCitiesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesByCountryIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesByStateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodsByLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesByCountryIdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCitiesByStateIdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCitiesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityByTagOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeCitiesByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateNeighborhoodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodsByCityIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNeighborhoodsByCityIdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteNeighborhoodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchNeighborhoodsByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback MergeNeighborhoodsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebLocationService() {
            this.Url = global::SnCore.Web.Soap.Tests.Properties.Settings.Default.SnCore_Web_Soap_Tests_WebLocationService_WebLocationService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateOrUpdateCountryCompletedEventHandler CreateOrUpdateCountryCompleted;
        
        /// <remarks/>
        public event GetCountryByIdCompletedEventHandler GetCountryByIdCompleted;
        
        /// <remarks/>
        public event GetCountriesCompletedEventHandler GetCountriesCompleted;
        
        /// <remarks/>
        public event GetCountriesWithDefaultCompletedEventHandler GetCountriesWithDefaultCompleted;
        
        /// <remarks/>
        public event GetCountriesCountCompletedEventHandler GetCountriesCountCompleted;
        
        /// <remarks/>
        public event DeleteCountryCompletedEventHandler DeleteCountryCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateStateCompletedEventHandler CreateOrUpdateStateCompleted;
        
        /// <remarks/>
        public event GetStateByIdCompletedEventHandler GetStateByIdCompleted;
        
        /// <remarks/>
        public event GetStatesCompletedEventHandler GetStatesCompleted;
        
        /// <remarks/>
        public event GetStatesCountCompletedEventHandler GetStatesCountCompleted;
        
        /// <remarks/>
        public event GetStatesByCountryIdCompletedEventHandler GetStatesByCountryIdCompleted;
        
        /// <remarks/>
        public event GetStatesByCountryIdCountCompletedEventHandler GetStatesByCountryIdCountCompleted;
        
        /// <remarks/>
        public event GetStatesByCountryNameCompletedEventHandler GetStatesByCountryNameCompleted;
        
        /// <remarks/>
        public event GetStatesByCountryNameCountCompletedEventHandler GetStatesByCountryNameCountCompleted;
        
        /// <remarks/>
        public event DeleteStateCompletedEventHandler DeleteStateCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateCityCompletedEventHandler CreateOrUpdateCityCompleted;
        
        /// <remarks/>
        public event GetCityByIdCompletedEventHandler GetCityByIdCompleted;
        
        /// <remarks/>
        public event GetCitiesCompletedEventHandler GetCitiesCompleted;
        
        /// <remarks/>
        public event GetAccountCitiesCompletedEventHandler GetAccountCitiesCompleted;
        
        /// <remarks/>
        public event GetAccountCitiesCountCompletedEventHandler GetAccountCitiesCountCompleted;
        
        /// <remarks/>
        public event GetCitiesCountCompletedEventHandler GetCitiesCountCompleted;
        
        /// <remarks/>
        public event GetCitiesByCountryIdCompletedEventHandler GetCitiesByCountryIdCompleted;
        
        /// <remarks/>
        public event GetCitiesByStateIdCompletedEventHandler GetCitiesByStateIdCompleted;
        
        /// <remarks/>
        public event GetCitiesByLocationCompletedEventHandler GetCitiesByLocationCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodsByLocationCompletedEventHandler GetNeighborhoodsByLocationCompleted;
        
        /// <remarks/>
        public event GetCitiesByCountryIdCountCompletedEventHandler GetCitiesByCountryIdCountCompleted;
        
        /// <remarks/>
        public event GetCitiesByStateIdCountCompletedEventHandler GetCitiesByStateIdCountCompleted;
        
        /// <remarks/>
        public event DeleteCityCompletedEventHandler DeleteCityCompleted;
        
        /// <remarks/>
        public event SearchCitiesByNameCompletedEventHandler SearchCitiesByNameCompleted;
        
        /// <remarks/>
        public event GetCityByTagCompletedEventHandler GetCityByTagCompleted;
        
        /// <remarks/>
        public event MergeCitiesCompletedEventHandler MergeCitiesCompleted;
        
        /// <remarks/>
        public event MergeCitiesByNameCompletedEventHandler MergeCitiesByNameCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateNeighborhoodCompletedEventHandler CreateOrUpdateNeighborhoodCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodByIdCompletedEventHandler GetNeighborhoodByIdCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodsCompletedEventHandler GetNeighborhoodsCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodsCountCompletedEventHandler GetNeighborhoodsCountCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodsByCityIdCompletedEventHandler GetNeighborhoodsByCityIdCompleted;
        
        /// <remarks/>
        public event GetNeighborhoodsByCityIdCountCompletedEventHandler GetNeighborhoodsByCityIdCountCompleted;
        
        /// <remarks/>
        public event DeleteNeighborhoodCompletedEventHandler DeleteNeighborhoodCompleted;
        
        /// <remarks/>
        public event SearchNeighborhoodsByNameCompletedEventHandler SearchNeighborhoodsByNameCompleted;
        
        /// <remarks/>
        public event MergeNeighborhoodsCompletedEventHandler MergeNeighborhoodsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateCountry", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateCountry(string ticket, TransitCountry country) {
            object[] results = this.Invoke("CreateOrUpdateCountry", new object[] {
                        ticket,
                        country});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateCountryAsync(string ticket, TransitCountry country) {
            this.CreateOrUpdateCountryAsync(ticket, country, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateCountryAsync(string ticket, TransitCountry country, object userState) {
            if ((this.CreateOrUpdateCountryOperationCompleted == null)) {
                this.CreateOrUpdateCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateCountryOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateCountry", new object[] {
                        ticket,
                        country}, this.CreateOrUpdateCountryOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateCountryOperationCompleted(object arg) {
            if ((this.CreateOrUpdateCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateCountryCompleted(this, new CreateOrUpdateCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCountryById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCountry GetCountryById(string ticket, int id) {
            object[] results = this.Invoke("GetCountryById", new object[] {
                        ticket,
                        id});
            return ((TransitCountry)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountryByIdAsync(string ticket, int id) {
            this.GetCountryByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetCountryByIdAsync(string ticket, int id, object userState) {
            if ((this.GetCountryByIdOperationCompleted == null)) {
                this.GetCountryByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountryByIdOperationCompleted);
            }
            this.InvokeAsync("GetCountryById", new object[] {
                        ticket,
                        id}, this.GetCountryByIdOperationCompleted, userState);
        }
        
        private void OnGetCountryByIdOperationCompleted(object arg) {
            if ((this.GetCountryByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountryByIdCompleted(this, new GetCountryByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCountries", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCountry[] GetCountries(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCountries", new object[] {
                        ticket,
                        options});
            return ((TransitCountry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCountriesAsync(string ticket, ServiceQueryOptions options) {
            this.GetCountriesAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetCountriesAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetCountriesOperationCompleted == null)) {
                this.GetCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountriesOperationCompleted);
            }
            this.InvokeAsync("GetCountries", new object[] {
                        ticket,
                        options}, this.GetCountriesOperationCompleted, userState);
        }
        
        private void OnGetCountriesOperationCompleted(object arg) {
            if ((this.GetCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountriesCompleted(this, new GetCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCountriesWithDefault", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCountry[] GetCountriesWithDefault(string ticket, string defaultname, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCountriesWithDefault", new object[] {
                        ticket,
                        defaultname,
                        options});
            return ((TransitCountry[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCountriesWithDefaultAsync(string ticket, string defaultname, ServiceQueryOptions options) {
            this.GetCountriesWithDefaultAsync(ticket, defaultname, options, null);
        }
        
        /// <remarks/>
        public void GetCountriesWithDefaultAsync(string ticket, string defaultname, ServiceQueryOptions options, object userState) {
            if ((this.GetCountriesWithDefaultOperationCompleted == null)) {
                this.GetCountriesWithDefaultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountriesWithDefaultOperationCompleted);
            }
            this.InvokeAsync("GetCountriesWithDefault", new object[] {
                        ticket,
                        defaultname,
                        options}, this.GetCountriesWithDefaultOperationCompleted, userState);
        }
        
        private void OnGetCountriesWithDefaultOperationCompleted(object arg) {
            if ((this.GetCountriesWithDefaultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountriesWithDefaultCompleted(this, new GetCountriesWithDefaultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCountriesCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCountriesCount(string ticket) {
            object[] results = this.Invoke("GetCountriesCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCountriesCountAsync(string ticket) {
            this.GetCountriesCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetCountriesCountAsync(string ticket, object userState) {
            if ((this.GetCountriesCountOperationCompleted == null)) {
                this.GetCountriesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCountriesCountOperationCompleted);
            }
            this.InvokeAsync("GetCountriesCount", new object[] {
                        ticket}, this.GetCountriesCountOperationCompleted, userState);
        }
        
        private void OnGetCountriesCountOperationCompleted(object arg) {
            if ((this.GetCountriesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCountriesCountCompleted(this, new GetCountriesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteCountry", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCountry(string ticket, int id) {
            this.Invoke("DeleteCountry", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteCountryAsync(string ticket, int id) {
            this.DeleteCountryAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteCountryAsync(string ticket, int id, object userState) {
            if ((this.DeleteCountryOperationCompleted == null)) {
                this.DeleteCountryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCountryOperationCompleted);
            }
            this.InvokeAsync("DeleteCountry", new object[] {
                        ticket,
                        id}, this.DeleteCountryOperationCompleted, userState);
        }
        
        private void OnDeleteCountryOperationCompleted(object arg) {
            if ((this.DeleteCountryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCountryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateState", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateState(string ticket, TransitState state) {
            object[] results = this.Invoke("CreateOrUpdateState", new object[] {
                        ticket,
                        state});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateStateAsync(string ticket, TransitState state) {
            this.CreateOrUpdateStateAsync(ticket, state, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateStateAsync(string ticket, TransitState state, object userState) {
            if ((this.CreateOrUpdateStateOperationCompleted == null)) {
                this.CreateOrUpdateStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateStateOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateState", new object[] {
                        ticket,
                        state}, this.CreateOrUpdateStateOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateStateOperationCompleted(object arg) {
            if ((this.CreateOrUpdateStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateStateCompleted(this, new CreateOrUpdateStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStateById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitState GetStateById(string ticket, int id) {
            object[] results = this.Invoke("GetStateById", new object[] {
                        ticket,
                        id});
            return ((TransitState)(results[0]));
        }
        
        /// <remarks/>
        public void GetStateByIdAsync(string ticket, int id) {
            this.GetStateByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetStateByIdAsync(string ticket, int id, object userState) {
            if ((this.GetStateByIdOperationCompleted == null)) {
                this.GetStateByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStateByIdOperationCompleted);
            }
            this.InvokeAsync("GetStateById", new object[] {
                        ticket,
                        id}, this.GetStateByIdOperationCompleted, userState);
        }
        
        private void OnGetStateByIdOperationCompleted(object arg) {
            if ((this.GetStateByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStateByIdCompleted(this, new GetStateByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStates", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitState[] GetStates(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetStates", new object[] {
                        ticket,
                        options});
            return ((TransitState[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesAsync(string ticket, ServiceQueryOptions options) {
            this.GetStatesAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetStatesAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetStatesOperationCompleted == null)) {
                this.GetStatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesOperationCompleted);
            }
            this.InvokeAsync("GetStates", new object[] {
                        ticket,
                        options}, this.GetStatesOperationCompleted, userState);
        }
        
        private void OnGetStatesOperationCompleted(object arg) {
            if ((this.GetStatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesCompleted(this, new GetStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStatesCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStatesCount(string ticket) {
            object[] results = this.Invoke("GetStatesCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesCountAsync(string ticket) {
            this.GetStatesCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetStatesCountAsync(string ticket, object userState) {
            if ((this.GetStatesCountOperationCompleted == null)) {
                this.GetStatesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesCountOperationCompleted);
            }
            this.InvokeAsync("GetStatesCount", new object[] {
                        ticket}, this.GetStatesCountOperationCompleted, userState);
        }
        
        private void OnGetStatesCountOperationCompleted(object arg) {
            if ((this.GetStatesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesCountCompleted(this, new GetStatesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStatesByCountryId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitState[] GetStatesByCountryId(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetStatesByCountryId", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitState[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesByCountryIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetStatesByCountryIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetStatesByCountryIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetStatesByCountryIdOperationCompleted == null)) {
                this.GetStatesByCountryIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesByCountryIdOperationCompleted);
            }
            this.InvokeAsync("GetStatesByCountryId", new object[] {
                        ticket,
                        id,
                        options}, this.GetStatesByCountryIdOperationCompleted, userState);
        }
        
        private void OnGetStatesByCountryIdOperationCompleted(object arg) {
            if ((this.GetStatesByCountryIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesByCountryIdCompleted(this, new GetStatesByCountryIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStatesByCountryIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStatesByCountryIdCount(string ticket, int id) {
            object[] results = this.Invoke("GetStatesByCountryIdCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesByCountryIdCountAsync(string ticket, int id) {
            this.GetStatesByCountryIdCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetStatesByCountryIdCountAsync(string ticket, int id, object userState) {
            if ((this.GetStatesByCountryIdCountOperationCompleted == null)) {
                this.GetStatesByCountryIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesByCountryIdCountOperationCompleted);
            }
            this.InvokeAsync("GetStatesByCountryIdCount", new object[] {
                        ticket,
                        id}, this.GetStatesByCountryIdCountOperationCompleted, userState);
        }
        
        private void OnGetStatesByCountryIdCountOperationCompleted(object arg) {
            if ((this.GetStatesByCountryIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesByCountryIdCountCompleted(this, new GetStatesByCountryIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStatesByCountryName", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitState[] GetStatesByCountryName(string ticket, string name, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetStatesByCountryName", new object[] {
                        ticket,
                        name,
                        options});
            return ((TransitState[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesByCountryNameAsync(string ticket, string name, ServiceQueryOptions options) {
            this.GetStatesByCountryNameAsync(ticket, name, options, null);
        }
        
        /// <remarks/>
        public void GetStatesByCountryNameAsync(string ticket, string name, ServiceQueryOptions options, object userState) {
            if ((this.GetStatesByCountryNameOperationCompleted == null)) {
                this.GetStatesByCountryNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesByCountryNameOperationCompleted);
            }
            this.InvokeAsync("GetStatesByCountryName", new object[] {
                        ticket,
                        name,
                        options}, this.GetStatesByCountryNameOperationCompleted, userState);
        }
        
        private void OnGetStatesByCountryNameOperationCompleted(object arg) {
            if ((this.GetStatesByCountryNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesByCountryNameCompleted(this, new GetStatesByCountryNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetStatesByCountryNameCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStatesByCountryNameCount(string ticket, string name) {
            object[] results = this.Invoke("GetStatesByCountryNameCount", new object[] {
                        ticket,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatesByCountryNameCountAsync(string ticket, string name) {
            this.GetStatesByCountryNameCountAsync(ticket, name, null);
        }
        
        /// <remarks/>
        public void GetStatesByCountryNameCountAsync(string ticket, string name, object userState) {
            if ((this.GetStatesByCountryNameCountOperationCompleted == null)) {
                this.GetStatesByCountryNameCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatesByCountryNameCountOperationCompleted);
            }
            this.InvokeAsync("GetStatesByCountryNameCount", new object[] {
                        ticket,
                        name}, this.GetStatesByCountryNameCountOperationCompleted, userState);
        }
        
        private void OnGetStatesByCountryNameCountOperationCompleted(object arg) {
            if ((this.GetStatesByCountryNameCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatesByCountryNameCountCompleted(this, new GetStatesByCountryNameCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteState", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteState(string ticket, int id) {
            this.Invoke("DeleteState", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteStateAsync(string ticket, int id) {
            this.DeleteStateAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteStateAsync(string ticket, int id, object userState) {
            if ((this.DeleteStateOperationCompleted == null)) {
                this.DeleteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteStateOperationCompleted);
            }
            this.InvokeAsync("DeleteState", new object[] {
                        ticket,
                        id}, this.DeleteStateOperationCompleted, userState);
        }
        
        private void OnDeleteStateOperationCompleted(object arg) {
            if ((this.DeleteStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateCity", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateCity(string ticket, TransitCity city) {
            object[] results = this.Invoke("CreateOrUpdateCity", new object[] {
                        ticket,
                        city});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateCityAsync(string ticket, TransitCity city) {
            this.CreateOrUpdateCityAsync(ticket, city, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateCityAsync(string ticket, TransitCity city, object userState) {
            if ((this.CreateOrUpdateCityOperationCompleted == null)) {
                this.CreateOrUpdateCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateCityOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateCity", new object[] {
                        ticket,
                        city}, this.CreateOrUpdateCityOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateCityOperationCompleted(object arg) {
            if ((this.CreateOrUpdateCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateCityCompleted(this, new CreateOrUpdateCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCityById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity GetCityById(string ticket, int id) {
            object[] results = this.Invoke("GetCityById", new object[] {
                        ticket,
                        id});
            return ((TransitCity)(results[0]));
        }
        
        /// <remarks/>
        public void GetCityByIdAsync(string ticket, int id) {
            this.GetCityByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetCityByIdAsync(string ticket, int id, object userState) {
            if ((this.GetCityByIdOperationCompleted == null)) {
                this.GetCityByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityByIdOperationCompleted);
            }
            this.InvokeAsync("GetCityById", new object[] {
                        ticket,
                        id}, this.GetCityByIdOperationCompleted, userState);
        }
        
        private void OnGetCityByIdOperationCompleted(object arg) {
            if ((this.GetCityByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityByIdCompleted(this, new GetCityByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCities", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity[] GetCities(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCities", new object[] {
                        ticket,
                        options});
            return ((TransitCity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesAsync(string ticket, ServiceQueryOptions options) {
            this.GetCitiesAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetCitiesAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetCitiesOperationCompleted == null)) {
                this.GetCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesOperationCompleted);
            }
            this.InvokeAsync("GetCities", new object[] {
                        ticket,
                        options}, this.GetCitiesOperationCompleted, userState);
        }
        
        private void OnGetCitiesOperationCompleted(object arg) {
            if ((this.GetCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesCompleted(this, new GetCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetAccountCities", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitAccountCity[] GetAccountCities(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetAccountCities", new object[] {
                        ticket,
                        options});
            return ((TransitAccountCity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountCitiesAsync(string ticket, ServiceQueryOptions options) {
            this.GetAccountCitiesAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetAccountCitiesAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetAccountCitiesOperationCompleted == null)) {
                this.GetAccountCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountCitiesOperationCompleted);
            }
            this.InvokeAsync("GetAccountCities", new object[] {
                        ticket,
                        options}, this.GetAccountCitiesOperationCompleted, userState);
        }
        
        private void OnGetAccountCitiesOperationCompleted(object arg) {
            if ((this.GetAccountCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountCitiesCompleted(this, new GetAccountCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetAccountCitiesCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAccountCitiesCount(string ticket) {
            object[] results = this.Invoke("GetAccountCitiesCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountCitiesCountAsync(string ticket) {
            this.GetAccountCitiesCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetAccountCitiesCountAsync(string ticket, object userState) {
            if ((this.GetAccountCitiesCountOperationCompleted == null)) {
                this.GetAccountCitiesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountCitiesCountOperationCompleted);
            }
            this.InvokeAsync("GetAccountCitiesCount", new object[] {
                        ticket}, this.GetAccountCitiesCountOperationCompleted, userState);
        }
        
        private void OnGetAccountCitiesCountOperationCompleted(object arg) {
            if ((this.GetAccountCitiesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountCitiesCountCompleted(this, new GetAccountCitiesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCitiesCount(string ticket) {
            object[] results = this.Invoke("GetCitiesCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesCountAsync(string ticket) {
            this.GetCitiesCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetCitiesCountAsync(string ticket, object userState) {
            if ((this.GetCitiesCountOperationCompleted == null)) {
                this.GetCitiesCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesCountOperationCompleted);
            }
            this.InvokeAsync("GetCitiesCount", new object[] {
                        ticket}, this.GetCitiesCountOperationCompleted, userState);
        }
        
        private void OnGetCitiesCountOperationCompleted(object arg) {
            if ((this.GetCitiesCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesCountCompleted(this, new GetCitiesCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesByCountryId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity[] GetCitiesByCountryId(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCitiesByCountryId", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitCity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesByCountryIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetCitiesByCountryIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetCitiesByCountryIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetCitiesByCountryIdOperationCompleted == null)) {
                this.GetCitiesByCountryIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryIdOperationCompleted);
            }
            this.InvokeAsync("GetCitiesByCountryId", new object[] {
                        ticket,
                        id,
                        options}, this.GetCitiesByCountryIdOperationCompleted, userState);
        }
        
        private void OnGetCitiesByCountryIdOperationCompleted(object arg) {
            if ((this.GetCitiesByCountryIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesByCountryIdCompleted(this, new GetCitiesByCountryIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesByStateId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity[] GetCitiesByStateId(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCitiesByStateId", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitCity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesByStateIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetCitiesByStateIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetCitiesByStateIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetCitiesByStateIdOperationCompleted == null)) {
                this.GetCitiesByStateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesByStateIdOperationCompleted);
            }
            this.InvokeAsync("GetCitiesByStateId", new object[] {
                        ticket,
                        id,
                        options}, this.GetCitiesByStateIdOperationCompleted, userState);
        }
        
        private void OnGetCitiesByStateIdOperationCompleted(object arg) {
            if ((this.GetCitiesByStateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesByStateIdCompleted(this, new GetCitiesByStateIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesByLocation", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity[] GetCitiesByLocation(string ticket, string country, string state, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetCitiesByLocation", new object[] {
                        ticket,
                        country,
                        state,
                        options});
            return ((TransitCity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesByLocationAsync(string ticket, string country, string state, ServiceQueryOptions options) {
            this.GetCitiesByLocationAsync(ticket, country, state, options, null);
        }
        
        /// <remarks/>
        public void GetCitiesByLocationAsync(string ticket, string country, string state, ServiceQueryOptions options, object userState) {
            if ((this.GetCitiesByLocationOperationCompleted == null)) {
                this.GetCitiesByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesByLocationOperationCompleted);
            }
            this.InvokeAsync("GetCitiesByLocation", new object[] {
                        ticket,
                        country,
                        state,
                        options}, this.GetCitiesByLocationOperationCompleted, userState);
        }
        
        private void OnGetCitiesByLocationOperationCompleted(object arg) {
            if ((this.GetCitiesByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesByLocationCompleted(this, new GetCitiesByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoodsByLocation", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitNeighborhood[] GetNeighborhoodsByLocation(string ticket, string country, string state, string city, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetNeighborhoodsByLocation", new object[] {
                        ticket,
                        country,
                        state,
                        city,
                        options});
            return ((TransitNeighborhood[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByLocationAsync(string ticket, string country, string state, string city, ServiceQueryOptions options) {
            this.GetNeighborhoodsByLocationAsync(ticket, country, state, city, options, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByLocationAsync(string ticket, string country, string state, string city, ServiceQueryOptions options, object userState) {
            if ((this.GetNeighborhoodsByLocationOperationCompleted == null)) {
                this.GetNeighborhoodsByLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodsByLocationOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoodsByLocation", new object[] {
                        ticket,
                        country,
                        state,
                        city,
                        options}, this.GetNeighborhoodsByLocationOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodsByLocationOperationCompleted(object arg) {
            if ((this.GetNeighborhoodsByLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodsByLocationCompleted(this, new GetNeighborhoodsByLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesByCountryIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCitiesByCountryIdCount(string ticket, int id) {
            object[] results = this.Invoke("GetCitiesByCountryIdCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesByCountryIdCountAsync(string ticket, int id) {
            this.GetCitiesByCountryIdCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetCitiesByCountryIdCountAsync(string ticket, int id, object userState) {
            if ((this.GetCitiesByCountryIdCountOperationCompleted == null)) {
                this.GetCitiesByCountryIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryIdCountOperationCompleted);
            }
            this.InvokeAsync("GetCitiesByCountryIdCount", new object[] {
                        ticket,
                        id}, this.GetCitiesByCountryIdCountOperationCompleted, userState);
        }
        
        private void OnGetCitiesByCountryIdCountOperationCompleted(object arg) {
            if ((this.GetCitiesByCountryIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesByCountryIdCountCompleted(this, new GetCitiesByCountryIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCitiesByStateIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCitiesByStateIdCount(string ticket, int id) {
            object[] results = this.Invoke("GetCitiesByStateIdCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesByStateIdCountAsync(string ticket, int id) {
            this.GetCitiesByStateIdCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetCitiesByStateIdCountAsync(string ticket, int id, object userState) {
            if ((this.GetCitiesByStateIdCountOperationCompleted == null)) {
                this.GetCitiesByStateIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesByStateIdCountOperationCompleted);
            }
            this.InvokeAsync("GetCitiesByStateIdCount", new object[] {
                        ticket,
                        id}, this.GetCitiesByStateIdCountOperationCompleted, userState);
        }
        
        private void OnGetCitiesByStateIdCountOperationCompleted(object arg) {
            if ((this.GetCitiesByStateIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesByStateIdCountCompleted(this, new GetCitiesByStateIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteCity", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCity(string ticket, int id) {
            this.Invoke("DeleteCity", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteCityAsync(string ticket, int id) {
            this.DeleteCityAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteCityAsync(string ticket, int id, object userState) {
            if ((this.DeleteCityOperationCompleted == null)) {
                this.DeleteCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCityOperationCompleted);
            }
            this.InvokeAsync("DeleteCity", new object[] {
                        ticket,
                        id}, this.DeleteCityOperationCompleted, userState);
        }
        
        private void OnDeleteCityOperationCompleted(object arg) {
            if ((this.DeleteCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchCitiesByName", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity[] SearchCitiesByName(string ticket, string name, ServiceQueryOptions options) {
            object[] results = this.Invoke("SearchCitiesByName", new object[] {
                        ticket,
                        name,
                        options});
            return ((TransitCity[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchCitiesByNameAsync(string ticket, string name, ServiceQueryOptions options) {
            this.SearchCitiesByNameAsync(ticket, name, options, null);
        }
        
        /// <remarks/>
        public void SearchCitiesByNameAsync(string ticket, string name, ServiceQueryOptions options, object userState) {
            if ((this.SearchCitiesByNameOperationCompleted == null)) {
                this.SearchCitiesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCitiesByNameOperationCompleted);
            }
            this.InvokeAsync("SearchCitiesByName", new object[] {
                        ticket,
                        name,
                        options}, this.SearchCitiesByNameOperationCompleted, userState);
        }
        
        private void OnSearchCitiesByNameOperationCompleted(object arg) {
            if ((this.SearchCitiesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCitiesByNameCompleted(this, new SearchCitiesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetCityByTag", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitCity GetCityByTag(string ticket, string tag) {
            object[] results = this.Invoke("GetCityByTag", new object[] {
                        ticket,
                        tag});
            return ((TransitCity)(results[0]));
        }
        
        /// <remarks/>
        public void GetCityByTagAsync(string ticket, string tag) {
            this.GetCityByTagAsync(ticket, tag, null);
        }
        
        /// <remarks/>
        public void GetCityByTagAsync(string ticket, string tag, object userState) {
            if ((this.GetCityByTagOperationCompleted == null)) {
                this.GetCityByTagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityByTagOperationCompleted);
            }
            this.InvokeAsync("GetCityByTag", new object[] {
                        ticket,
                        tag}, this.GetCityByTagOperationCompleted, userState);
        }
        
        private void OnGetCityByTagOperationCompleted(object arg) {
            if ((this.GetCityByTagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityByTagCompleted(this, new GetCityByTagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MergeCities", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MergeCities(string ticket, int target_id, int merge_id) {
            object[] results = this.Invoke("MergeCities", new object[] {
                        ticket,
                        target_id,
                        merge_id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MergeCitiesAsync(string ticket, int target_id, int merge_id) {
            this.MergeCitiesAsync(ticket, target_id, merge_id, null);
        }
        
        /// <remarks/>
        public void MergeCitiesAsync(string ticket, int target_id, int merge_id, object userState) {
            if ((this.MergeCitiesOperationCompleted == null)) {
                this.MergeCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeCitiesOperationCompleted);
            }
            this.InvokeAsync("MergeCities", new object[] {
                        ticket,
                        target_id,
                        merge_id}, this.MergeCitiesOperationCompleted, userState);
        }
        
        private void OnMergeCitiesOperationCompleted(object arg) {
            if ((this.MergeCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeCitiesCompleted(this, new MergeCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MergeCitiesByName", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MergeCitiesByName(string ticket, int target_id, string name, string state, string country) {
            object[] results = this.Invoke("MergeCitiesByName", new object[] {
                        ticket,
                        target_id,
                        name,
                        state,
                        country});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MergeCitiesByNameAsync(string ticket, int target_id, string name, string state, string country) {
            this.MergeCitiesByNameAsync(ticket, target_id, name, state, country, null);
        }
        
        /// <remarks/>
        public void MergeCitiesByNameAsync(string ticket, int target_id, string name, string state, string country, object userState) {
            if ((this.MergeCitiesByNameOperationCompleted == null)) {
                this.MergeCitiesByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeCitiesByNameOperationCompleted);
            }
            this.InvokeAsync("MergeCitiesByName", new object[] {
                        ticket,
                        target_id,
                        name,
                        state,
                        country}, this.MergeCitiesByNameOperationCompleted, userState);
        }
        
        private void OnMergeCitiesByNameOperationCompleted(object arg) {
            if ((this.MergeCitiesByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeCitiesByNameCompleted(this, new MergeCitiesByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateNeighborhood", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateNeighborhood(string ticket, TransitNeighborhood neighborhood) {
            object[] results = this.Invoke("CreateOrUpdateNeighborhood", new object[] {
                        ticket,
                        neighborhood});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateNeighborhoodAsync(string ticket, TransitNeighborhood neighborhood) {
            this.CreateOrUpdateNeighborhoodAsync(ticket, neighborhood, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateNeighborhoodAsync(string ticket, TransitNeighborhood neighborhood, object userState) {
            if ((this.CreateOrUpdateNeighborhoodOperationCompleted == null)) {
                this.CreateOrUpdateNeighborhoodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateNeighborhoodOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateNeighborhood", new object[] {
                        ticket,
                        neighborhood}, this.CreateOrUpdateNeighborhoodOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateNeighborhoodOperationCompleted(object arg) {
            if ((this.CreateOrUpdateNeighborhoodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateNeighborhoodCompleted(this, new CreateOrUpdateNeighborhoodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoodById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitNeighborhood GetNeighborhoodById(string ticket, int id) {
            object[] results = this.Invoke("GetNeighborhoodById", new object[] {
                        ticket,
                        id});
            return ((TransitNeighborhood)(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodByIdAsync(string ticket, int id) {
            this.GetNeighborhoodByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodByIdAsync(string ticket, int id, object userState) {
            if ((this.GetNeighborhoodByIdOperationCompleted == null)) {
                this.GetNeighborhoodByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodByIdOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoodById", new object[] {
                        ticket,
                        id}, this.GetNeighborhoodByIdOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodByIdOperationCompleted(object arg) {
            if ((this.GetNeighborhoodByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodByIdCompleted(this, new GetNeighborhoodByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoods", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitNeighborhood[] GetNeighborhoods(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetNeighborhoods", new object[] {
                        ticket,
                        options});
            return ((TransitNeighborhood[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodsAsync(string ticket, ServiceQueryOptions options) {
            this.GetNeighborhoodsAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodsAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetNeighborhoodsOperationCompleted == null)) {
                this.GetNeighborhoodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodsOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoods", new object[] {
                        ticket,
                        options}, this.GetNeighborhoodsOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodsOperationCompleted(object arg) {
            if ((this.GetNeighborhoodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodsCompleted(this, new GetNeighborhoodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoodsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNeighborhoodsCount(string ticket) {
            object[] results = this.Invoke("GetNeighborhoodsCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodsCountAsync(string ticket) {
            this.GetNeighborhoodsCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodsCountAsync(string ticket, object userState) {
            if ((this.GetNeighborhoodsCountOperationCompleted == null)) {
                this.GetNeighborhoodsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodsCountOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoodsCount", new object[] {
                        ticket}, this.GetNeighborhoodsCountOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodsCountOperationCompleted(object arg) {
            if ((this.GetNeighborhoodsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodsCountCompleted(this, new GetNeighborhoodsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoodsByCityId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitNeighborhood[] GetNeighborhoodsByCityId(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetNeighborhoodsByCityId", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitNeighborhood[])(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByCityIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetNeighborhoodsByCityIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByCityIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetNeighborhoodsByCityIdOperationCompleted == null)) {
                this.GetNeighborhoodsByCityIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodsByCityIdOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoodsByCityId", new object[] {
                        ticket,
                        id,
                        options}, this.GetNeighborhoodsByCityIdOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodsByCityIdOperationCompleted(object arg) {
            if ((this.GetNeighborhoodsByCityIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodsByCityIdCompleted(this, new GetNeighborhoodsByCityIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetNeighborhoodsByCityIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNeighborhoodsByCityIdCount(string ticket, int id) {
            object[] results = this.Invoke("GetNeighborhoodsByCityIdCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByCityIdCountAsync(string ticket, int id) {
            this.GetNeighborhoodsByCityIdCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetNeighborhoodsByCityIdCountAsync(string ticket, int id, object userState) {
            if ((this.GetNeighborhoodsByCityIdCountOperationCompleted == null)) {
                this.GetNeighborhoodsByCityIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNeighborhoodsByCityIdCountOperationCompleted);
            }
            this.InvokeAsync("GetNeighborhoodsByCityIdCount", new object[] {
                        ticket,
                        id}, this.GetNeighborhoodsByCityIdCountOperationCompleted, userState);
        }
        
        private void OnGetNeighborhoodsByCityIdCountOperationCompleted(object arg) {
            if ((this.GetNeighborhoodsByCityIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNeighborhoodsByCityIdCountCompleted(this, new GetNeighborhoodsByCityIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteNeighborhood", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteNeighborhood(string ticket, int id) {
            this.Invoke("DeleteNeighborhood", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteNeighborhoodAsync(string ticket, int id) {
            this.DeleteNeighborhoodAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteNeighborhoodAsync(string ticket, int id, object userState) {
            if ((this.DeleteNeighborhoodOperationCompleted == null)) {
                this.DeleteNeighborhoodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNeighborhoodOperationCompleted);
            }
            this.InvokeAsync("DeleteNeighborhood", new object[] {
                        ticket,
                        id}, this.DeleteNeighborhoodOperationCompleted, userState);
        }
        
        private void OnDeleteNeighborhoodOperationCompleted(object arg) {
            if ((this.DeleteNeighborhoodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteNeighborhoodCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchNeighborhoodsByName", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitNeighborhood[] SearchNeighborhoodsByName(string ticket, string name, ServiceQueryOptions options) {
            object[] results = this.Invoke("SearchNeighborhoodsByName", new object[] {
                        ticket,
                        name,
                        options});
            return ((TransitNeighborhood[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchNeighborhoodsByNameAsync(string ticket, string name, ServiceQueryOptions options) {
            this.SearchNeighborhoodsByNameAsync(ticket, name, options, null);
        }
        
        /// <remarks/>
        public void SearchNeighborhoodsByNameAsync(string ticket, string name, ServiceQueryOptions options, object userState) {
            if ((this.SearchNeighborhoodsByNameOperationCompleted == null)) {
                this.SearchNeighborhoodsByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchNeighborhoodsByNameOperationCompleted);
            }
            this.InvokeAsync("SearchNeighborhoodsByName", new object[] {
                        ticket,
                        name,
                        options}, this.SearchNeighborhoodsByNameOperationCompleted, userState);
        }
        
        private void OnSearchNeighborhoodsByNameOperationCompleted(object arg) {
            if ((this.SearchNeighborhoodsByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchNeighborhoodsByNameCompleted(this, new SearchNeighborhoodsByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MergeNeighborhoods", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MergeNeighborhoods(string ticket, int target_id, int merge_id) {
            object[] results = this.Invoke("MergeNeighborhoods", new object[] {
                        ticket,
                        target_id,
                        merge_id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MergeNeighborhoodsAsync(string ticket, int target_id, int merge_id) {
            this.MergeNeighborhoodsAsync(ticket, target_id, merge_id, null);
        }
        
        /// <remarks/>
        public void MergeNeighborhoodsAsync(string ticket, int target_id, int merge_id, object userState) {
            if ((this.MergeNeighborhoodsOperationCompleted == null)) {
                this.MergeNeighborhoodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMergeNeighborhoodsOperationCompleted);
            }
            this.InvokeAsync("MergeNeighborhoods", new object[] {
                        ticket,
                        target_id,
                        merge_id}, this.MergeNeighborhoodsOperationCompleted, userState);
        }
        
        private void OnMergeNeighborhoodsOperationCompleted(object arg) {
            if ((this.MergeNeighborhoodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MergeNeighborhoodsCompleted(this, new MergeNeighborhoodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitCountry : TransitServiceOfCountry {
        
        private string nameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitCountry))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfCountry {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitNeighborhood))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfNeighborhood {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitNeighborhood : TransitServiceOfNeighborhood {
        
        private string nameField;
        
        private string countryField;
        
        private string cityField;
        
        private string stateField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitAccountCity))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfAccountCity {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitAccountCity : TransitServiceOfAccountCity {
        
        private string nameField;
        
        private string countryField;
        
        private string stateField;
        
        private int totalField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitCity))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfCity {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitCity : TransitServiceOfCity {
        
        private string nameField;
        
        private string tagField;
        
        private string countryField;
        
        private string stateField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitState))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfState {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitState : TransitServiceOfState {
        
        private string nameField;
        
        private string countryField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class ServiceQueryOptions {
        
        private int pageSizeField;
        
        private int pageNumberField;
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateCountryCompletedEventHandler(object sender, CreateOrUpdateCountryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCountryByIdCompletedEventHandler(object sender, GetCountryByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountryByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountryByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCountry Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCountry)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCountriesCompletedEventHandler(object sender, GetCountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCountry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCountry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCountriesWithDefaultCompletedEventHandler(object sender, GetCountriesWithDefaultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountriesWithDefaultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountriesWithDefaultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCountry[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCountry[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCountriesCountCompletedEventHandler(object sender, GetCountriesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCountriesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCountriesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteCountryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateStateCompletedEventHandler(object sender, CreateOrUpdateStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStateByIdCompletedEventHandler(object sender, GetStateByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStateByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStateByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitState)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesCompletedEventHandler(object sender, GetStatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitState[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitState[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesCountCompletedEventHandler(object sender, GetStatesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesByCountryIdCompletedEventHandler(object sender, GetStatesByCountryIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesByCountryIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesByCountryIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitState[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitState[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesByCountryIdCountCompletedEventHandler(object sender, GetStatesByCountryIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesByCountryIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesByCountryIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesByCountryNameCompletedEventHandler(object sender, GetStatesByCountryNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesByCountryNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesByCountryNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitState[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitState[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetStatesByCountryNameCountCompletedEventHandler(object sender, GetStatesByCountryNameCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatesByCountryNameCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatesByCountryNameCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateCityCompletedEventHandler(object sender, CreateOrUpdateCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCityByIdCompletedEventHandler(object sender, GetCityByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCityByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesCompletedEventHandler(object sender, GetCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAccountCitiesCompletedEventHandler(object sender, GetAccountCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitAccountCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitAccountCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAccountCitiesCountCompletedEventHandler(object sender, GetAccountCitiesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountCitiesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountCitiesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesCountCompletedEventHandler(object sender, GetCitiesCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesByCountryIdCompletedEventHandler(object sender, GetCitiesByCountryIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesByCountryIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesByCountryIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesByStateIdCompletedEventHandler(object sender, GetCitiesByStateIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesByStateIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesByStateIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesByLocationCompletedEventHandler(object sender, GetCitiesByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodsByLocationCompletedEventHandler(object sender, GetNeighborhoodsByLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodsByLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodsByLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitNeighborhood[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitNeighborhood[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesByCountryIdCountCompletedEventHandler(object sender, GetCitiesByCountryIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesByCountryIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesByCountryIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCitiesByStateIdCountCompletedEventHandler(object sender, GetCitiesByStateIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesByStateIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesByStateIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteCityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchCitiesByNameCompletedEventHandler(object sender, SearchCitiesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCitiesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCitiesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCityByTagCompletedEventHandler(object sender, GetCityByTagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCityByTagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityByTagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitCity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitCity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MergeCitiesCompletedEventHandler(object sender, MergeCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MergeCitiesByNameCompletedEventHandler(object sender, MergeCitiesByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeCitiesByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeCitiesByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateNeighborhoodCompletedEventHandler(object sender, CreateOrUpdateNeighborhoodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateNeighborhoodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateNeighborhoodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodByIdCompletedEventHandler(object sender, GetNeighborhoodByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitNeighborhood Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitNeighborhood)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodsCompletedEventHandler(object sender, GetNeighborhoodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitNeighborhood[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitNeighborhood[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodsCountCompletedEventHandler(object sender, GetNeighborhoodsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodsByCityIdCompletedEventHandler(object sender, GetNeighborhoodsByCityIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodsByCityIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodsByCityIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitNeighborhood[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitNeighborhood[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetNeighborhoodsByCityIdCountCompletedEventHandler(object sender, GetNeighborhoodsByCityIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNeighborhoodsByCityIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNeighborhoodsByCityIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteNeighborhoodCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchNeighborhoodsByNameCompletedEventHandler(object sender, SearchNeighborhoodsByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchNeighborhoodsByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchNeighborhoodsByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitNeighborhood[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitNeighborhood[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MergeNeighborhoodsCompletedEventHandler(object sender, MergeNeighborhoodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MergeNeighborhoodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MergeNeighborhoodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591