//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace SnCore.Web.Soap.Tests.WebDiscussionService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebDiscussionServiceSoap", Namespace="http://www.vestris.com/sncore/ns/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfDiscussionThread))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfDiscussionPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitServiceOfDiscussion))]
    public partial class WebDiscussionService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOrCreateDiscussionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionsByObjectIdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionsByObjectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionRedirectUriOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThreadRedirectUriOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateDiscussionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountDiscussionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountDiscussionsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDiscussionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadPostsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadPostsByOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadPostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOrUpdateDiscussionPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionPostByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionPostsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionPostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestDiscussionPostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestDiscussionPostsByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDiscussionPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionTopOfThreadsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionTopOfThreadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadsCountByDiscussionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadsByDiscussionIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDiscussionThreadsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDiscussionThreadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveDiscussionThreadOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveDiscussionPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveAccountBlogPostOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDiscussionThreadByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDiscussionPostsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDiscussionPostsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDiscussionPostsByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchDiscussionPostsByIdCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebDiscussionService() {
            this.Url = global::SnCore.Web.Soap.Tests.Properties.Settings.Default.SnCore_Web_Soap_Tests_WebDiscussionService_WebDiscussionService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetOrCreateDiscussionIdCompletedEventHandler GetOrCreateDiscussionIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionsByObjectIdCountCompletedEventHandler GetDiscussionsByObjectIdCountCompleted;
        
        /// <remarks/>
        public event GetDiscussionsByObjectIdCompletedEventHandler GetDiscussionsByObjectIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionRedirectUriCompletedEventHandler GetDiscussionRedirectUriCompleted;
        
        /// <remarks/>
        public event GetThreadRedirectUriCompletedEventHandler GetThreadRedirectUriCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateDiscussionCompletedEventHandler CreateOrUpdateDiscussionCompleted;
        
        /// <remarks/>
        public event GetDiscussionsCompletedEventHandler GetDiscussionsCompleted;
        
        /// <remarks/>
        public event GetDiscussionsCountCompletedEventHandler GetDiscussionsCountCompleted;
        
        /// <remarks/>
        public event GetAccountDiscussionsCompletedEventHandler GetAccountDiscussionsCompleted;
        
        /// <remarks/>
        public event GetAccountDiscussionsCountCompletedEventHandler GetAccountDiscussionsCountCompleted;
        
        /// <remarks/>
        public event DeleteDiscussionCompletedEventHandler DeleteDiscussionCompleted;
        
        /// <remarks/>
        public event GetDiscussionByIdCompletedEventHandler GetDiscussionByIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadPostsCountCompletedEventHandler GetDiscussionThreadPostsCountCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadPostsByOrderCompletedEventHandler GetDiscussionThreadPostsByOrderCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadPostsCompletedEventHandler GetDiscussionThreadPostsCompleted;
        
        /// <remarks/>
        public event CreateOrUpdateDiscussionPostCompletedEventHandler CreateOrUpdateDiscussionPostCompleted;
        
        /// <remarks/>
        public event GetDiscussionPostByIdCompletedEventHandler GetDiscussionPostByIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionPostsCountCompletedEventHandler GetDiscussionPostsCountCompleted;
        
        /// <remarks/>
        public event GetDiscussionPostsCompletedEventHandler GetDiscussionPostsCompleted;
        
        /// <remarks/>
        public event GetLatestDiscussionPostsCompletedEventHandler GetLatestDiscussionPostsCompleted;
        
        /// <remarks/>
        public event GetLatestDiscussionPostsByIdCompletedEventHandler GetLatestDiscussionPostsByIdCompleted;
        
        /// <remarks/>
        public event DeleteDiscussionPostCompletedEventHandler DeleteDiscussionPostCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadsCountCompletedEventHandler GetDiscussionThreadsCountCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadsCompletedEventHandler GetDiscussionThreadsCompleted;
        
        /// <remarks/>
        public event GetDiscussionTopOfThreadsCountCompletedEventHandler GetDiscussionTopOfThreadsCountCompleted;
        
        /// <remarks/>
        public event GetDiscussionTopOfThreadsCompletedEventHandler GetDiscussionTopOfThreadsCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadsCountByDiscussionIdCompletedEventHandler GetDiscussionThreadsCountByDiscussionIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadsByDiscussionIdCompletedEventHandler GetDiscussionThreadsByDiscussionIdCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadPostCompletedEventHandler GetDiscussionThreadPostCompleted;
        
        /// <remarks/>
        public event GetUserDiscussionThreadsCountCompletedEventHandler GetUserDiscussionThreadsCountCompleted;
        
        /// <remarks/>
        public event GetUserDiscussionThreadsCompletedEventHandler GetUserDiscussionThreadsCompleted;
        
        /// <remarks/>
        public event MoveDiscussionThreadCompletedEventHandler MoveDiscussionThreadCompleted;
        
        /// <remarks/>
        public event MoveDiscussionPostCompletedEventHandler MoveDiscussionPostCompleted;
        
        /// <remarks/>
        public event MoveAccountBlogPostCompletedEventHandler MoveAccountBlogPostCompleted;
        
        /// <remarks/>
        public event GetDiscussionThreadByIdCompletedEventHandler GetDiscussionThreadByIdCompleted;
        
        /// <remarks/>
        public event SearchDiscussionPostsCompletedEventHandler SearchDiscussionPostsCompleted;
        
        /// <remarks/>
        public event SearchDiscussionPostsCountCompletedEventHandler SearchDiscussionPostsCountCompleted;
        
        /// <remarks/>
        public event SearchDiscussionPostsByIdCompletedEventHandler SearchDiscussionPostsByIdCompleted;
        
        /// <remarks/>
        public event SearchDiscussionPostsByIdCountCompletedEventHandler SearchDiscussionPostsByIdCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetOrCreateDiscussionId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOrCreateDiscussionId(string ticket, string typename, int id) {
            object[] results = this.Invoke("GetOrCreateDiscussionId", new object[] {
                        ticket,
                        typename,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrCreateDiscussionIdAsync(string ticket, string typename, int id) {
            this.GetOrCreateDiscussionIdAsync(ticket, typename, id, null);
        }
        
        /// <remarks/>
        public void GetOrCreateDiscussionIdAsync(string ticket, string typename, int id, object userState) {
            if ((this.GetOrCreateDiscussionIdOperationCompleted == null)) {
                this.GetOrCreateDiscussionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrCreateDiscussionIdOperationCompleted);
            }
            this.InvokeAsync("GetOrCreateDiscussionId", new object[] {
                        ticket,
                        typename,
                        id}, this.GetOrCreateDiscussionIdOperationCompleted, userState);
        }
        
        private void OnGetOrCreateDiscussionIdOperationCompleted(object arg) {
            if ((this.GetOrCreateDiscussionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrCreateDiscussionIdCompleted(this, new GetOrCreateDiscussionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionsByObjectIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionsByObjectIdCount(string ticket, string typename, int id) {
            object[] results = this.Invoke("GetDiscussionsByObjectIdCount", new object[] {
                        ticket,
                        typename,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionsByObjectIdCountAsync(string ticket, string typename, int id) {
            this.GetDiscussionsByObjectIdCountAsync(ticket, typename, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionsByObjectIdCountAsync(string ticket, string typename, int id, object userState) {
            if ((this.GetDiscussionsByObjectIdCountOperationCompleted == null)) {
                this.GetDiscussionsByObjectIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionsByObjectIdCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionsByObjectIdCount", new object[] {
                        ticket,
                        typename,
                        id}, this.GetDiscussionsByObjectIdCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionsByObjectIdCountOperationCompleted(object arg) {
            if ((this.GetDiscussionsByObjectIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionsByObjectIdCountCompleted(this, new GetDiscussionsByObjectIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionsByObjectId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussion[] GetDiscussionsByObjectId(string ticket, string typename, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionsByObjectId", new object[] {
                        ticket,
                        typename,
                        id,
                        options});
            return ((TransitDiscussion[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionsByObjectIdAsync(string ticket, string typename, int id, ServiceQueryOptions options) {
            this.GetDiscussionsByObjectIdAsync(ticket, typename, id, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionsByObjectIdAsync(string ticket, string typename, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionsByObjectIdOperationCompleted == null)) {
                this.GetDiscussionsByObjectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionsByObjectIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionsByObjectId", new object[] {
                        ticket,
                        typename,
                        id,
                        options}, this.GetDiscussionsByObjectIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionsByObjectIdOperationCompleted(object arg) {
            if ((this.GetDiscussionsByObjectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionsByObjectIdCompleted(this, new GetDiscussionsByObjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionRedirectUri", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDiscussionRedirectUri(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionRedirectUri", new object[] {
                        ticket,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionRedirectUriAsync(string ticket, int id) {
            this.GetDiscussionRedirectUriAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionRedirectUriAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionRedirectUriOperationCompleted == null)) {
                this.GetDiscussionRedirectUriOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionRedirectUriOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionRedirectUri", new object[] {
                        ticket,
                        id}, this.GetDiscussionRedirectUriOperationCompleted, userState);
        }
        
        private void OnGetDiscussionRedirectUriOperationCompleted(object arg) {
            if ((this.GetDiscussionRedirectUriCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionRedirectUriCompleted(this, new GetDiscussionRedirectUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetThreadRedirectUri", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetThreadRedirectUri(string ticket, int id) {
            object[] results = this.Invoke("GetThreadRedirectUri", new object[] {
                        ticket,
                        id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetThreadRedirectUriAsync(string ticket, int id) {
            this.GetThreadRedirectUriAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetThreadRedirectUriAsync(string ticket, int id, object userState) {
            if ((this.GetThreadRedirectUriOperationCompleted == null)) {
                this.GetThreadRedirectUriOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThreadRedirectUriOperationCompleted);
            }
            this.InvokeAsync("GetThreadRedirectUri", new object[] {
                        ticket,
                        id}, this.GetThreadRedirectUriOperationCompleted, userState);
        }
        
        private void OnGetThreadRedirectUriOperationCompleted(object arg) {
            if ((this.GetThreadRedirectUriCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThreadRedirectUriCompleted(this, new GetThreadRedirectUriCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateDiscussion", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateDiscussion(string ticket, TransitDiscussion discussion) {
            object[] results = this.Invoke("CreateOrUpdateDiscussion", new object[] {
                        ticket,
                        discussion});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateDiscussionAsync(string ticket, TransitDiscussion discussion) {
            this.CreateOrUpdateDiscussionAsync(ticket, discussion, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateDiscussionAsync(string ticket, TransitDiscussion discussion, object userState) {
            if ((this.CreateOrUpdateDiscussionOperationCompleted == null)) {
                this.CreateOrUpdateDiscussionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateDiscussionOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateDiscussion", new object[] {
                        ticket,
                        discussion}, this.CreateOrUpdateDiscussionOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateDiscussionOperationCompleted(object arg) {
            if ((this.CreateOrUpdateDiscussionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateDiscussionCompleted(this, new CreateOrUpdateDiscussionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussions", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussion[] GetDiscussions(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussions", new object[] {
                        ticket,
                        options});
            return ((TransitDiscussion[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionsAsync(string ticket, ServiceQueryOptions options) {
            this.GetDiscussionsAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionsAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionsOperationCompleted == null)) {
                this.GetDiscussionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionsOperationCompleted);
            }
            this.InvokeAsync("GetDiscussions", new object[] {
                        ticket,
                        options}, this.GetDiscussionsOperationCompleted, userState);
        }
        
        private void OnGetDiscussionsOperationCompleted(object arg) {
            if ((this.GetDiscussionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionsCompleted(this, new GetDiscussionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionsCount(string ticket) {
            object[] results = this.Invoke("GetDiscussionsCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionsCountAsync(string ticket) {
            this.GetDiscussionsCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetDiscussionsCountAsync(string ticket, object userState) {
            if ((this.GetDiscussionsCountOperationCompleted == null)) {
                this.GetDiscussionsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionsCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionsCount", new object[] {
                        ticket}, this.GetDiscussionsCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionsCountOperationCompleted(object arg) {
            if ((this.GetDiscussionsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionsCountCompleted(this, new GetDiscussionsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetAccountDiscussions", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussion[] GetAccountDiscussions(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetAccountDiscussions", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussion[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountDiscussionsAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetAccountDiscussionsAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetAccountDiscussionsAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetAccountDiscussionsOperationCompleted == null)) {
                this.GetAccountDiscussionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountDiscussionsOperationCompleted);
            }
            this.InvokeAsync("GetAccountDiscussions", new object[] {
                        ticket,
                        id,
                        options}, this.GetAccountDiscussionsOperationCompleted, userState);
        }
        
        private void OnGetAccountDiscussionsOperationCompleted(object arg) {
            if ((this.GetAccountDiscussionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountDiscussionsCompleted(this, new GetAccountDiscussionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetAccountDiscussionsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAccountDiscussionsCount(string ticket, int id) {
            object[] results = this.Invoke("GetAccountDiscussionsCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountDiscussionsCountAsync(string ticket, int id) {
            this.GetAccountDiscussionsCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetAccountDiscussionsCountAsync(string ticket, int id, object userState) {
            if ((this.GetAccountDiscussionsCountOperationCompleted == null)) {
                this.GetAccountDiscussionsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountDiscussionsCountOperationCompleted);
            }
            this.InvokeAsync("GetAccountDiscussionsCount", new object[] {
                        ticket,
                        id}, this.GetAccountDiscussionsCountOperationCompleted, userState);
        }
        
        private void OnGetAccountDiscussionsCountOperationCompleted(object arg) {
            if ((this.GetAccountDiscussionsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountDiscussionsCountCompleted(this, new GetAccountDiscussionsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteDiscussion", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDiscussion(string ticket, int id) {
            this.Invoke("DeleteDiscussion", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteDiscussionAsync(string ticket, int id) {
            this.DeleteDiscussionAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteDiscussionAsync(string ticket, int id, object userState) {
            if ((this.DeleteDiscussionOperationCompleted == null)) {
                this.DeleteDiscussionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDiscussionOperationCompleted);
            }
            this.InvokeAsync("DeleteDiscussion", new object[] {
                        ticket,
                        id}, this.DeleteDiscussionOperationCompleted, userState);
        }
        
        private void OnDeleteDiscussionOperationCompleted(object arg) {
            if ((this.DeleteDiscussionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDiscussionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussion GetDiscussionById(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionById", new object[] {
                        ticket,
                        id});
            return ((TransitDiscussion)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionByIdAsync(string ticket, int id) {
            this.GetDiscussionByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionByIdAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionByIdOperationCompleted == null)) {
                this.GetDiscussionByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionByIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionById", new object[] {
                        ticket,
                        id}, this.GetDiscussionByIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionByIdOperationCompleted(object arg) {
            if ((this.GetDiscussionByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionByIdCompleted(this, new GetDiscussionByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadPostsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionThreadPostsCount(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionThreadPostsCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsCountAsync(string ticket, int id) {
            this.GetDiscussionThreadPostsCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsCountAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionThreadPostsCountOperationCompleted == null)) {
                this.GetDiscussionThreadPostsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadPostsCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadPostsCount", new object[] {
                        ticket,
                        id}, this.GetDiscussionThreadPostsCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadPostsCountOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadPostsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadPostsCountCompleted(this, new GetDiscussionThreadPostsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadPostsByOrder", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionThreadPostsByOrder(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionThreadPostsByOrder", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsByOrderAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetDiscussionThreadPostsByOrderAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsByOrderAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionThreadPostsByOrderOperationCompleted == null)) {
                this.GetDiscussionThreadPostsByOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadPostsByOrderOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadPostsByOrder", new object[] {
                        ticket,
                        id,
                        options}, this.GetDiscussionThreadPostsByOrderOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadPostsByOrderOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadPostsByOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadPostsByOrderCompleted(this, new GetDiscussionThreadPostsByOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadPosts", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionThreadPosts(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionThreadPosts", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetDiscussionThreadPostsAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostsAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionThreadPostsOperationCompleted == null)) {
                this.GetDiscussionThreadPostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadPostsOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadPosts", new object[] {
                        ticket,
                        id,
                        options}, this.GetDiscussionThreadPostsOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadPostsOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadPostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadPostsCompleted(this, new GetDiscussionThreadPostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/CreateOrUpdateDiscussionPost", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateOrUpdateDiscussionPost(string ticket, TransitDiscussionPost post) {
            object[] results = this.Invoke("CreateOrUpdateDiscussionPost", new object[] {
                        ticket,
                        post});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOrUpdateDiscussionPostAsync(string ticket, TransitDiscussionPost post) {
            this.CreateOrUpdateDiscussionPostAsync(ticket, post, null);
        }
        
        /// <remarks/>
        public void CreateOrUpdateDiscussionPostAsync(string ticket, TransitDiscussionPost post, object userState) {
            if ((this.CreateOrUpdateDiscussionPostOperationCompleted == null)) {
                this.CreateOrUpdateDiscussionPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOrUpdateDiscussionPostOperationCompleted);
            }
            this.InvokeAsync("CreateOrUpdateDiscussionPost", new object[] {
                        ticket,
                        post}, this.CreateOrUpdateDiscussionPostOperationCompleted, userState);
        }
        
        private void OnCreateOrUpdateDiscussionPostOperationCompleted(object arg) {
            if ((this.CreateOrUpdateDiscussionPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOrUpdateDiscussionPostCompleted(this, new CreateOrUpdateDiscussionPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionPostById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost GetDiscussionPostById(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionPostById", new object[] {
                        ticket,
                        id});
            return ((TransitDiscussionPost)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionPostByIdAsync(string ticket, int id) {
            this.GetDiscussionPostByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionPostByIdAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionPostByIdOperationCompleted == null)) {
                this.GetDiscussionPostByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionPostByIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionPostById", new object[] {
                        ticket,
                        id}, this.GetDiscussionPostByIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionPostByIdOperationCompleted(object arg) {
            if ((this.GetDiscussionPostByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionPostByIdCompleted(this, new GetDiscussionPostByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionPostsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionPostsCount(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionPostsCount", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionPostsCountAsync(string ticket, int id) {
            this.GetDiscussionPostsCountAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionPostsCountAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionPostsCountOperationCompleted == null)) {
                this.GetDiscussionPostsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionPostsCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionPostsCount", new object[] {
                        ticket,
                        id}, this.GetDiscussionPostsCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionPostsCountOperationCompleted(object arg) {
            if ((this.GetDiscussionPostsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionPostsCountCompleted(this, new GetDiscussionPostsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionPosts", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionPosts(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionPosts", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionPostsAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetDiscussionPostsAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionPostsAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionPostsOperationCompleted == null)) {
                this.GetDiscussionPostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionPostsOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionPosts", new object[] {
                        ticket,
                        id,
                        options}, this.GetDiscussionPostsOperationCompleted, userState);
        }
        
        private void OnGetDiscussionPostsOperationCompleted(object arg) {
            if ((this.GetDiscussionPostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionPostsCompleted(this, new GetDiscussionPostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetLatestDiscussionPosts", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetLatestDiscussionPosts(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetLatestDiscussionPosts", new object[] {
                        ticket,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestDiscussionPostsAsync(string ticket, ServiceQueryOptions options) {
            this.GetLatestDiscussionPostsAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetLatestDiscussionPostsAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetLatestDiscussionPostsOperationCompleted == null)) {
                this.GetLatestDiscussionPostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestDiscussionPostsOperationCompleted);
            }
            this.InvokeAsync("GetLatestDiscussionPosts", new object[] {
                        ticket,
                        options}, this.GetLatestDiscussionPostsOperationCompleted, userState);
        }
        
        private void OnGetLatestDiscussionPostsOperationCompleted(object arg) {
            if ((this.GetLatestDiscussionPostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestDiscussionPostsCompleted(this, new GetLatestDiscussionPostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetLatestDiscussionPostsById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetLatestDiscussionPostsById(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetLatestDiscussionPostsById", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestDiscussionPostsByIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetLatestDiscussionPostsByIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetLatestDiscussionPostsByIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetLatestDiscussionPostsByIdOperationCompleted == null)) {
                this.GetLatestDiscussionPostsByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestDiscussionPostsByIdOperationCompleted);
            }
            this.InvokeAsync("GetLatestDiscussionPostsById", new object[] {
                        ticket,
                        id,
                        options}, this.GetLatestDiscussionPostsByIdOperationCompleted, userState);
        }
        
        private void OnGetLatestDiscussionPostsByIdOperationCompleted(object arg) {
            if ((this.GetLatestDiscussionPostsByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestDiscussionPostsByIdCompleted(this, new GetLatestDiscussionPostsByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/DeleteDiscussionPost", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDiscussionPost(string ticket, int id) {
            this.Invoke("DeleteDiscussionPost", new object[] {
                        ticket,
                        id});
        }
        
        /// <remarks/>
        public void DeleteDiscussionPostAsync(string ticket, int id) {
            this.DeleteDiscussionPostAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void DeleteDiscussionPostAsync(string ticket, int id, object userState) {
            if ((this.DeleteDiscussionPostOperationCompleted == null)) {
                this.DeleteDiscussionPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDiscussionPostOperationCompleted);
            }
            this.InvokeAsync("DeleteDiscussionPost", new object[] {
                        ticket,
                        id}, this.DeleteDiscussionPostOperationCompleted, userState);
        }
        
        private void OnDeleteDiscussionPostOperationCompleted(object arg) {
            if ((this.DeleteDiscussionPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDiscussionPostCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionThreadsCount(string ticket) {
            object[] results = this.Invoke("GetDiscussionThreadsCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsCountAsync(string ticket) {
            this.GetDiscussionThreadsCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsCountAsync(string ticket, object userState) {
            if ((this.GetDiscussionThreadsCountOperationCompleted == null)) {
                this.GetDiscussionThreadsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadsCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadsCount", new object[] {
                        ticket}, this.GetDiscussionThreadsCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadsCountOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadsCountCompleted(this, new GetDiscussionThreadsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreads", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionThreads(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionThreads", new object[] {
                        ticket,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsAsync(string ticket, ServiceQueryOptions options) {
            this.GetDiscussionThreadsAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionThreadsOperationCompleted == null)) {
                this.GetDiscussionThreadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadsOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreads", new object[] {
                        ticket,
                        options}, this.GetDiscussionThreadsOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadsOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadsCompleted(this, new GetDiscussionThreadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionTopOfThreadsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionTopOfThreadsCount(string ticket) {
            object[] results = this.Invoke("GetDiscussionTopOfThreadsCount", new object[] {
                        ticket});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionTopOfThreadsCountAsync(string ticket) {
            this.GetDiscussionTopOfThreadsCountAsync(ticket, null);
        }
        
        /// <remarks/>
        public void GetDiscussionTopOfThreadsCountAsync(string ticket, object userState) {
            if ((this.GetDiscussionTopOfThreadsCountOperationCompleted == null)) {
                this.GetDiscussionTopOfThreadsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionTopOfThreadsCountOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionTopOfThreadsCount", new object[] {
                        ticket}, this.GetDiscussionTopOfThreadsCountOperationCompleted, userState);
        }
        
        private void OnGetDiscussionTopOfThreadsCountOperationCompleted(object arg) {
            if ((this.GetDiscussionTopOfThreadsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionTopOfThreadsCountCompleted(this, new GetDiscussionTopOfThreadsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionTopOfThreads", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionTopOfThreads(string ticket, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionTopOfThreads", new object[] {
                        ticket,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionTopOfThreadsAsync(string ticket, ServiceQueryOptions options) {
            this.GetDiscussionTopOfThreadsAsync(ticket, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionTopOfThreadsAsync(string ticket, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionTopOfThreadsOperationCompleted == null)) {
                this.GetDiscussionTopOfThreadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionTopOfThreadsOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionTopOfThreads", new object[] {
                        ticket,
                        options}, this.GetDiscussionTopOfThreadsOperationCompleted, userState);
        }
        
        private void OnGetDiscussionTopOfThreadsOperationCompleted(object arg) {
            if ((this.GetDiscussionTopOfThreadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionTopOfThreadsCompleted(this, new GetDiscussionTopOfThreadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadsCountByDiscussionId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDiscussionThreadsCountByDiscussionId(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionThreadsCountByDiscussionId", new object[] {
                        ticket,
                        id});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsCountByDiscussionIdAsync(string ticket, int id) {
            this.GetDiscussionThreadsCountByDiscussionIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsCountByDiscussionIdAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionThreadsCountByDiscussionIdOperationCompleted == null)) {
                this.GetDiscussionThreadsCountByDiscussionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadsCountByDiscussionIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadsCountByDiscussionId", new object[] {
                        ticket,
                        id}, this.GetDiscussionThreadsCountByDiscussionIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadsCountByDiscussionIdOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadsCountByDiscussionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadsCountByDiscussionIdCompleted(this, new GetDiscussionThreadsCountByDiscussionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadsByDiscussionId", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetDiscussionThreadsByDiscussionId(string ticket, int id, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetDiscussionThreadsByDiscussionId", new object[] {
                        ticket,
                        id,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsByDiscussionIdAsync(string ticket, int id, ServiceQueryOptions options) {
            this.GetDiscussionThreadsByDiscussionIdAsync(ticket, id, options, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadsByDiscussionIdAsync(string ticket, int id, ServiceQueryOptions options, object userState) {
            if ((this.GetDiscussionThreadsByDiscussionIdOperationCompleted == null)) {
                this.GetDiscussionThreadsByDiscussionIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadsByDiscussionIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadsByDiscussionId", new object[] {
                        ticket,
                        id,
                        options}, this.GetDiscussionThreadsByDiscussionIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadsByDiscussionIdOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadsByDiscussionIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadsByDiscussionIdCompleted(this, new GetDiscussionThreadsByDiscussionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadPost", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost GetDiscussionThreadPost(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionThreadPost", new object[] {
                        ticket,
                        id});
            return ((TransitDiscussionPost)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostAsync(string ticket, int id) {
            this.GetDiscussionThreadPostAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadPostAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionThreadPostOperationCompleted == null)) {
                this.GetDiscussionThreadPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadPostOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadPost", new object[] {
                        ticket,
                        id}, this.GetDiscussionThreadPostOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadPostOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadPostCompleted(this, new GetDiscussionThreadPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetUserDiscussionThreadsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserDiscussionThreadsCount(string ticket, DiscussionQueryOptions qopt) {
            object[] results = this.Invoke("GetUserDiscussionThreadsCount", new object[] {
                        ticket,
                        qopt});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDiscussionThreadsCountAsync(string ticket, DiscussionQueryOptions qopt) {
            this.GetUserDiscussionThreadsCountAsync(ticket, qopt, null);
        }
        
        /// <remarks/>
        public void GetUserDiscussionThreadsCountAsync(string ticket, DiscussionQueryOptions qopt, object userState) {
            if ((this.GetUserDiscussionThreadsCountOperationCompleted == null)) {
                this.GetUserDiscussionThreadsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDiscussionThreadsCountOperationCompleted);
            }
            this.InvokeAsync("GetUserDiscussionThreadsCount", new object[] {
                        ticket,
                        qopt}, this.GetUserDiscussionThreadsCountOperationCompleted, userState);
        }
        
        private void OnGetUserDiscussionThreadsCountOperationCompleted(object arg) {
            if ((this.GetUserDiscussionThreadsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDiscussionThreadsCountCompleted(this, new GetUserDiscussionThreadsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetUserDiscussionThreads", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] GetUserDiscussionThreads(string ticket, DiscussionQueryOptions qopt, ServiceQueryOptions options) {
            object[] results = this.Invoke("GetUserDiscussionThreads", new object[] {
                        ticket,
                        qopt,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDiscussionThreadsAsync(string ticket, DiscussionQueryOptions qopt, ServiceQueryOptions options) {
            this.GetUserDiscussionThreadsAsync(ticket, qopt, options, null);
        }
        
        /// <remarks/>
        public void GetUserDiscussionThreadsAsync(string ticket, DiscussionQueryOptions qopt, ServiceQueryOptions options, object userState) {
            if ((this.GetUserDiscussionThreadsOperationCompleted == null)) {
                this.GetUserDiscussionThreadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDiscussionThreadsOperationCompleted);
            }
            this.InvokeAsync("GetUserDiscussionThreads", new object[] {
                        ticket,
                        qopt,
                        options}, this.GetUserDiscussionThreadsOperationCompleted, userState);
        }
        
        private void OnGetUserDiscussionThreadsOperationCompleted(object arg) {
            if ((this.GetUserDiscussionThreadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDiscussionThreadsCompleted(this, new GetUserDiscussionThreadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MoveDiscussionThread", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveDiscussionThread(string ticket, int threadid, int targetid) {
            this.Invoke("MoveDiscussionThread", new object[] {
                        ticket,
                        threadid,
                        targetid});
        }
        
        /// <remarks/>
        public void MoveDiscussionThreadAsync(string ticket, int threadid, int targetid) {
            this.MoveDiscussionThreadAsync(ticket, threadid, targetid, null);
        }
        
        /// <remarks/>
        public void MoveDiscussionThreadAsync(string ticket, int threadid, int targetid, object userState) {
            if ((this.MoveDiscussionThreadOperationCompleted == null)) {
                this.MoveDiscussionThreadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveDiscussionThreadOperationCompleted);
            }
            this.InvokeAsync("MoveDiscussionThread", new object[] {
                        ticket,
                        threadid,
                        targetid}, this.MoveDiscussionThreadOperationCompleted, userState);
        }
        
        private void OnMoveDiscussionThreadOperationCompleted(object arg) {
            if ((this.MoveDiscussionThreadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveDiscussionThreadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MoveDiscussionPost", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MoveDiscussionPost(string ticket, int postid, int targetid) {
            object[] results = this.Invoke("MoveDiscussionPost", new object[] {
                        ticket,
                        postid,
                        targetid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MoveDiscussionPostAsync(string ticket, int postid, int targetid) {
            this.MoveDiscussionPostAsync(ticket, postid, targetid, null);
        }
        
        /// <remarks/>
        public void MoveDiscussionPostAsync(string ticket, int postid, int targetid, object userState) {
            if ((this.MoveDiscussionPostOperationCompleted == null)) {
                this.MoveDiscussionPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveDiscussionPostOperationCompleted);
            }
            this.InvokeAsync("MoveDiscussionPost", new object[] {
                        ticket,
                        postid,
                        targetid}, this.MoveDiscussionPostOperationCompleted, userState);
        }
        
        private void OnMoveDiscussionPostOperationCompleted(object arg) {
            if ((this.MoveDiscussionPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveDiscussionPostCompleted(this, new MoveDiscussionPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/MoveAccountBlogPost", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int MoveAccountBlogPost(string ticket, int postid, int targetid) {
            object[] results = this.Invoke("MoveAccountBlogPost", new object[] {
                        ticket,
                        postid,
                        targetid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void MoveAccountBlogPostAsync(string ticket, int postid, int targetid) {
            this.MoveAccountBlogPostAsync(ticket, postid, targetid, null);
        }
        
        /// <remarks/>
        public void MoveAccountBlogPostAsync(string ticket, int postid, int targetid, object userState) {
            if ((this.MoveAccountBlogPostOperationCompleted == null)) {
                this.MoveAccountBlogPostOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveAccountBlogPostOperationCompleted);
            }
            this.InvokeAsync("MoveAccountBlogPost", new object[] {
                        ticket,
                        postid,
                        targetid}, this.MoveAccountBlogPostOperationCompleted, userState);
        }
        
        private void OnMoveAccountBlogPostOperationCompleted(object arg) {
            if ((this.MoveAccountBlogPostCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveAccountBlogPostCompleted(this, new MoveAccountBlogPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/GetDiscussionThreadById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionThread GetDiscussionThreadById(string ticket, int id) {
            object[] results = this.Invoke("GetDiscussionThreadById", new object[] {
                        ticket,
                        id});
            return ((TransitDiscussionThread)(results[0]));
        }
        
        /// <remarks/>
        public void GetDiscussionThreadByIdAsync(string ticket, int id) {
            this.GetDiscussionThreadByIdAsync(ticket, id, null);
        }
        
        /// <remarks/>
        public void GetDiscussionThreadByIdAsync(string ticket, int id, object userState) {
            if ((this.GetDiscussionThreadByIdOperationCompleted == null)) {
                this.GetDiscussionThreadByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDiscussionThreadByIdOperationCompleted);
            }
            this.InvokeAsync("GetDiscussionThreadById", new object[] {
                        ticket,
                        id}, this.GetDiscussionThreadByIdOperationCompleted, userState);
        }
        
        private void OnGetDiscussionThreadByIdOperationCompleted(object arg) {
            if ((this.GetDiscussionThreadByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDiscussionThreadByIdCompleted(this, new GetDiscussionThreadByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchDiscussionPosts", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] SearchDiscussionPosts(string ticket, string s, ServiceQueryOptions options) {
            object[] results = this.Invoke("SearchDiscussionPosts", new object[] {
                        ticket,
                        s,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsAsync(string ticket, string s, ServiceQueryOptions options) {
            this.SearchDiscussionPostsAsync(ticket, s, options, null);
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsAsync(string ticket, string s, ServiceQueryOptions options, object userState) {
            if ((this.SearchDiscussionPostsOperationCompleted == null)) {
                this.SearchDiscussionPostsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDiscussionPostsOperationCompleted);
            }
            this.InvokeAsync("SearchDiscussionPosts", new object[] {
                        ticket,
                        s,
                        options}, this.SearchDiscussionPostsOperationCompleted, userState);
        }
        
        private void OnSearchDiscussionPostsOperationCompleted(object arg) {
            if ((this.SearchDiscussionPostsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDiscussionPostsCompleted(this, new SearchDiscussionPostsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchDiscussionPostsCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SearchDiscussionPostsCount(string ticket, string s) {
            object[] results = this.Invoke("SearchDiscussionPostsCount", new object[] {
                        ticket,
                        s});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsCountAsync(string ticket, string s) {
            this.SearchDiscussionPostsCountAsync(ticket, s, null);
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsCountAsync(string ticket, string s, object userState) {
            if ((this.SearchDiscussionPostsCountOperationCompleted == null)) {
                this.SearchDiscussionPostsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDiscussionPostsCountOperationCompleted);
            }
            this.InvokeAsync("SearchDiscussionPostsCount", new object[] {
                        ticket,
                        s}, this.SearchDiscussionPostsCountOperationCompleted, userState);
        }
        
        private void OnSearchDiscussionPostsCountOperationCompleted(object arg) {
            if ((this.SearchDiscussionPostsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDiscussionPostsCountCompleted(this, new SearchDiscussionPostsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchDiscussionPostsById", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransitDiscussionPost[] SearchDiscussionPostsById(string ticket, int id, string s, ServiceQueryOptions options) {
            object[] results = this.Invoke("SearchDiscussionPostsById", new object[] {
                        ticket,
                        id,
                        s,
                        options});
            return ((TransitDiscussionPost[])(results[0]));
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsByIdAsync(string ticket, int id, string s, ServiceQueryOptions options) {
            this.SearchDiscussionPostsByIdAsync(ticket, id, s, options, null);
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsByIdAsync(string ticket, int id, string s, ServiceQueryOptions options, object userState) {
            if ((this.SearchDiscussionPostsByIdOperationCompleted == null)) {
                this.SearchDiscussionPostsByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDiscussionPostsByIdOperationCompleted);
            }
            this.InvokeAsync("SearchDiscussionPostsById", new object[] {
                        ticket,
                        id,
                        s,
                        options}, this.SearchDiscussionPostsByIdOperationCompleted, userState);
        }
        
        private void OnSearchDiscussionPostsByIdOperationCompleted(object arg) {
            if ((this.SearchDiscussionPostsByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDiscussionPostsByIdCompleted(this, new SearchDiscussionPostsByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.vestris.com/sncore/ns/SearchDiscussionPostsByIdCount", RequestNamespace="http://www.vestris.com/sncore/ns/", ResponseNamespace="http://www.vestris.com/sncore/ns/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SearchDiscussionPostsByIdCount(string ticket, int id, string s) {
            object[] results = this.Invoke("SearchDiscussionPostsByIdCount", new object[] {
                        ticket,
                        id,
                        s});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsByIdCountAsync(string ticket, int id, string s) {
            this.SearchDiscussionPostsByIdCountAsync(ticket, id, s, null);
        }
        
        /// <remarks/>
        public void SearchDiscussionPostsByIdCountAsync(string ticket, int id, string s, object userState) {
            if ((this.SearchDiscussionPostsByIdCountOperationCompleted == null)) {
                this.SearchDiscussionPostsByIdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchDiscussionPostsByIdCountOperationCompleted);
            }
            this.InvokeAsync("SearchDiscussionPostsByIdCount", new object[] {
                        ticket,
                        id,
                        s}, this.SearchDiscussionPostsByIdCountOperationCompleted, userState);
        }
        
        private void OnSearchDiscussionPostsByIdCountOperationCompleted(object arg) {
            if ((this.SearchDiscussionPostsByIdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchDiscussionPostsByIdCountCompleted(this, new SearchDiscussionPostsByIdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class ServiceQueryOptions {
        
        private int pageSizeField;
        
        private int pageNumberField;
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public int PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitDiscussionThread))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfDiscussionThread {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitDiscussionThread : TransitServiceOfDiscussionThread {
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private int discussionIdField;
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public int DiscussionId {
            get {
                return this.discussionIdField;
            }
            set {
                this.discussionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class DiscussionQueryOptions {
        
        private int accountIdField;
        
        private bool topOfThreadOnlyField;
        
        /// <remarks/>
        public int AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
            }
        }
        
        /// <remarks/>
        public bool TopOfThreadOnly {
            get {
                return this.topOfThreadOnlyField;
            }
            set {
                this.topOfThreadOnlyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitDiscussionPost))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfDiscussionPost {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitDiscussionPost : TransitServiceOfDiscussionPost {
        
        private bool canEditField;
        
        private bool canDeleteField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private int discussionIdField;
        
        private string discussionNameField;
        
        private int discussionThreadIdField;
        
        private int discussionPostParentIdField;
        
        private int accountIdField;
        
        private string accountNameField;
        
        private int accountPictureIdField;
        
        private string bodyField;
        
        private string subjectField;
        
        private int levelField;
        
        private System.DateTime discussionThreadModifiedField;
        
        private int discussionThreadCountField;
        
        private int repliesCountField;
        
        private bool stickyField;
        
        /// <remarks/>
        public bool CanEdit {
            get {
                return this.canEditField;
            }
            set {
                this.canEditField = value;
            }
        }
        
        /// <remarks/>
        public bool CanDelete {
            get {
                return this.canDeleteField;
            }
            set {
                this.canDeleteField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public int DiscussionId {
            get {
                return this.discussionIdField;
            }
            set {
                this.discussionIdField = value;
            }
        }
        
        /// <remarks/>
        public string DiscussionName {
            get {
                return this.discussionNameField;
            }
            set {
                this.discussionNameField = value;
            }
        }
        
        /// <remarks/>
        public int DiscussionThreadId {
            get {
                return this.discussionThreadIdField;
            }
            set {
                this.discussionThreadIdField = value;
            }
        }
        
        /// <remarks/>
        public int DiscussionPostParentId {
            get {
                return this.discussionPostParentIdField;
            }
            set {
                this.discussionPostParentIdField = value;
            }
        }
        
        /// <remarks/>
        public int AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
            }
        }
        
        /// <remarks/>
        public string AccountName {
            get {
                return this.accountNameField;
            }
            set {
                this.accountNameField = value;
            }
        }
        
        /// <remarks/>
        public int AccountPictureId {
            get {
                return this.accountPictureIdField;
            }
            set {
                this.accountPictureIdField = value;
            }
        }
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public int Level {
            get {
                return this.levelField;
            }
            set {
                this.levelField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DiscussionThreadModified {
            get {
                return this.discussionThreadModifiedField;
            }
            set {
                this.discussionThreadModifiedField = value;
            }
        }
        
        /// <remarks/>
        public int DiscussionThreadCount {
            get {
                return this.discussionThreadCountField;
            }
            set {
                this.discussionThreadCountField = value;
            }
        }
        
        /// <remarks/>
        public int RepliesCount {
            get {
                return this.repliesCountField;
            }
            set {
                this.repliesCountField = value;
            }
        }
        
        /// <remarks/>
        public bool Sticky {
            get {
                return this.stickyField;
            }
            set {
                this.stickyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TransitDiscussion))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public abstract partial class TransitServiceOfDiscussion {
        
        private int idField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.vestris.com/sncore/ns/")]
    public partial class TransitDiscussion : TransitServiceOfDiscussion {
        
        private string nameField;
        
        private string descriptionField;
        
        private int accountIdField;
        
        private int objectIdField;
        
        private int dataObjectIdField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private bool personalField;
        
        private int postCountField;
        
        private int threadCountField;
        
        private string parentObjectNameField;
        
        private string parentObjectUriField;
        
        private string parentObjectTypeField;
        
        private string defaultViewField;
        
        private int defaultViewRowsField;
        
        private bool canUpdateField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
            }
        }
        
        /// <remarks/>
        public int ObjectId {
            get {
                return this.objectIdField;
            }
            set {
                this.objectIdField = value;
            }
        }
        
        /// <remarks/>
        public int DataObjectId {
            get {
                return this.dataObjectIdField;
            }
            set {
                this.dataObjectIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public bool Personal {
            get {
                return this.personalField;
            }
            set {
                this.personalField = value;
            }
        }
        
        /// <remarks/>
        public int PostCount {
            get {
                return this.postCountField;
            }
            set {
                this.postCountField = value;
            }
        }
        
        /// <remarks/>
        public int ThreadCount {
            get {
                return this.threadCountField;
            }
            set {
                this.threadCountField = value;
            }
        }
        
        /// <remarks/>
        public string ParentObjectName {
            get {
                return this.parentObjectNameField;
            }
            set {
                this.parentObjectNameField = value;
            }
        }
        
        /// <remarks/>
        public string ParentObjectUri {
            get {
                return this.parentObjectUriField;
            }
            set {
                this.parentObjectUriField = value;
            }
        }
        
        /// <remarks/>
        public string ParentObjectType {
            get {
                return this.parentObjectTypeField;
            }
            set {
                this.parentObjectTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DefaultView {
            get {
                return this.defaultViewField;
            }
            set {
                this.defaultViewField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultViewRows {
            get {
                return this.defaultViewRowsField;
            }
            set {
                this.defaultViewRowsField = value;
            }
        }
        
        /// <remarks/>
        public bool CanUpdate {
            get {
                return this.canUpdateField;
            }
            set {
                this.canUpdateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetOrCreateDiscussionIdCompletedEventHandler(object sender, GetOrCreateDiscussionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrCreateDiscussionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrCreateDiscussionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionsByObjectIdCountCompletedEventHandler(object sender, GetDiscussionsByObjectIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionsByObjectIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionsByObjectIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionsByObjectIdCompletedEventHandler(object sender, GetDiscussionsByObjectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionsByObjectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionsByObjectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussion[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussion[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionRedirectUriCompletedEventHandler(object sender, GetDiscussionRedirectUriCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionRedirectUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionRedirectUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetThreadRedirectUriCompletedEventHandler(object sender, GetThreadRedirectUriCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetThreadRedirectUriCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetThreadRedirectUriCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateDiscussionCompletedEventHandler(object sender, CreateOrUpdateDiscussionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateDiscussionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateDiscussionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionsCompletedEventHandler(object sender, GetDiscussionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussion[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussion[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionsCountCompletedEventHandler(object sender, GetDiscussionsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAccountDiscussionsCompletedEventHandler(object sender, GetAccountDiscussionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountDiscussionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountDiscussionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussion[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussion[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAccountDiscussionsCountCompletedEventHandler(object sender, GetAccountDiscussionsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountDiscussionsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountDiscussionsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteDiscussionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionByIdCompletedEventHandler(object sender, GetDiscussionByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussion Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussion)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadPostsCountCompletedEventHandler(object sender, GetDiscussionThreadPostsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadPostsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadPostsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadPostsByOrderCompletedEventHandler(object sender, GetDiscussionThreadPostsByOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadPostsByOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadPostsByOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadPostsCompletedEventHandler(object sender, GetDiscussionThreadPostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadPostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadPostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOrUpdateDiscussionPostCompletedEventHandler(object sender, CreateOrUpdateDiscussionPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOrUpdateDiscussionPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOrUpdateDiscussionPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionPostByIdCompletedEventHandler(object sender, GetDiscussionPostByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionPostByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionPostByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionPostsCountCompletedEventHandler(object sender, GetDiscussionPostsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionPostsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionPostsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionPostsCompletedEventHandler(object sender, GetDiscussionPostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionPostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionPostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLatestDiscussionPostsCompletedEventHandler(object sender, GetLatestDiscussionPostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestDiscussionPostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestDiscussionPostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLatestDiscussionPostsByIdCompletedEventHandler(object sender, GetLatestDiscussionPostsByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestDiscussionPostsByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestDiscussionPostsByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteDiscussionPostCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadsCountCompletedEventHandler(object sender, GetDiscussionThreadsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadsCompletedEventHandler(object sender, GetDiscussionThreadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionTopOfThreadsCountCompletedEventHandler(object sender, GetDiscussionTopOfThreadsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionTopOfThreadsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionTopOfThreadsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionTopOfThreadsCompletedEventHandler(object sender, GetDiscussionTopOfThreadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionTopOfThreadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionTopOfThreadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadsCountByDiscussionIdCompletedEventHandler(object sender, GetDiscussionThreadsCountByDiscussionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadsCountByDiscussionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadsCountByDiscussionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadsByDiscussionIdCompletedEventHandler(object sender, GetDiscussionThreadsByDiscussionIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadsByDiscussionIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadsByDiscussionIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadPostCompletedEventHandler(object sender, GetDiscussionThreadPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetUserDiscussionThreadsCountCompletedEventHandler(object sender, GetUserDiscussionThreadsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDiscussionThreadsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDiscussionThreadsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetUserDiscussionThreadsCompletedEventHandler(object sender, GetUserDiscussionThreadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDiscussionThreadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDiscussionThreadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MoveDiscussionThreadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MoveDiscussionPostCompletedEventHandler(object sender, MoveDiscussionPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveDiscussionPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveDiscussionPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void MoveAccountBlogPostCompletedEventHandler(object sender, MoveAccountBlogPostCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveAccountBlogPostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveAccountBlogPostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetDiscussionThreadByIdCompletedEventHandler(object sender, GetDiscussionThreadByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDiscussionThreadByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDiscussionThreadByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionThread Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionThread)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchDiscussionPostsCompletedEventHandler(object sender, SearchDiscussionPostsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDiscussionPostsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDiscussionPostsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchDiscussionPostsCountCompletedEventHandler(object sender, SearchDiscussionPostsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDiscussionPostsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDiscussionPostsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchDiscussionPostsByIdCompletedEventHandler(object sender, SearchDiscussionPostsByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDiscussionPostsByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDiscussionPostsByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransitDiscussionPost[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransitDiscussionPost[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SearchDiscussionPostsByIdCountCompletedEventHandler(object sender, SearchDiscussionPostsByIdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchDiscussionPostsByIdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchDiscussionPostsByIdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591