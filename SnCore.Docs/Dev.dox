/*! \page dev Dev HowTo

\section dev_intro Introduction
This page will guide you through the SnCore development process. At first it may look complicated, but it's actually not hard
to get going and it's event easier to write useful code quickly and error-free since most of the complex infrastructure 
has been completely figured out for you.

\section dev_req Prerequisites 
\li Microsoft Windows 2000, 2003, XP or Vista. 
\li Microsoft SQL Server 2005
\li Microsoft .NET Framework 2.0
    <br>http://msdn.microsoft.com/netframework/downloads/updates/default.aspx
\li Microsoft IIS 6.0 or 7.0 running ASP.NET 2.0
\li Microsoft Visual Studio 2005 Service Pack 1
\li Microsoft Web Services Extension 3.0
    <br>http://msdn.microsoft.com/webservices/downloads/default.aspx
\li Subversion Client
    <br>http://subversion.tigris.org/
\li Puzzle Framework (ObjectMapper)
    <br>http://www.puzzleframework.com
\li MSBuild Tasks
    <br>http://msbuildtasks.tigris.org/
    
\section dev_source Source Code
<ol>
 <li>Download and install a Subversion client from http://subversion.tigris.org/.
 <li>Create a new directory, eg. C:\\Source.
 <li>Anonymous read-only access is enabled. Please e-mail dblock at dblock dot org for write access.
 <li>Check out the source code with <em>svn checkout svn://svn.vestris.com/sncore</em>
</ol>

\section dev_install Installation

Follow the normal \ref install. Visual Studio will create the websites for you, so you can skip that step. Once you have your
SnCore website running you're ready to go.

\subsection dev_install_vista Windows Vista

On Windows Vista, some security restrictions must be lifted.

\li Edit Physical Path Credentials in Advanced Settings and set a specific account to run the virtual
    directory under.
\li Set r/w permissions for the <em>NETWORK SERVICE</em> account on the SnCore.Web/Bin, SnCore.MobileWeb,
    SnCore.Web/IsapiRewrite and SnCore.MobileWeb/IsapiRewrite directories.
\li In registry, create HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Eventlog\\Application\\<b>SnCoreWeb</b>
    and <b>SnCoreMobileWeb</b>.

\section dev_datalifecycle Data LifeCycle

Most functionality in the system is data-driven. For example, you won't find a method to send a message, but you will find
a complete API to Create, Retrieve, Update and Delete a message (CRUD).

<ol>
 <li>Add a new SQL table and generate NHibernate class and mapping for it. This is all you have to do to be able to create, retrieve
     update and delete rows in the database. The generated code is entirely in the automatically generated SnCore.Data project. 
     You never have to deal with actual SQL code. For example, add a <em>Thing</em> table, which generates a <em>Thing</em> C# class.
     Read \ref data for implenentation details. Write unit tests for the data and managed layer in the SnCore.Data.Tests project.
 <li>Create a managed layer for your new class in SnCore.Services. You must create a so called transit class, in this case 
     <em>TransitThing</em> and a managed class <em>ManagedTransitThing</em>. This layer is usuall a straightforward stub with several 
     interesting methods.
     <ul>
      <li>The managed object is aware of the NHibernate session (the data connection). It can hence implement any side effects needed for
          <em>CreateOrUpdate</em> and <em>Delete</em>. These are typically updating the <em>Modified</em> column of the class, but may
          be more complex when an object has relationships.
      <li>The transit object can be constructed from the managed object with a, for the purpose of our example, <em>GetTransitThing</em> 
          method. The transit object is used to return a flat structure through web services. It seems redundant, but it is the easiest 
          way to strip any sensitive data and to combine multiple objects in one to expose to ASP.NET data binding and to separate 
          what goes between layers.
     </ul>
     You should write unit tests for the data and managed layer in the SnCore.Services.Tests project.
 <li>Create a new web service or methods within an existing web service. These are typically, for a class <em>Thing</em>, 
     <em>GetThingById</em>, <em>CreateOrUpdateThing</em>, <em>DeleteThingById</em>, <em>GetThings</em>, etc. Permissions are checked
     within the web services using the user ticket.
 <li>Create ASP.NET pages, such as <em>ThingsManage.aspx</em>, <em>ThingEdit.aspx</em>, etc.
</ol>

*/